{"remainingRequest":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\dayjs\\dayjs.min.js","dependencies":[{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\dayjs\\dayjs.min.js","mtime":499162500000},{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}