{"remainingRequest":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\vue-router\\dist\\vue-router.esm.js","dependencies":[{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\vue-router\\dist\\vue-router.esm.js","mtime":499162500000},{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vscodeprojects\\vuepress-theme-reco\\myblogs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiRDovdnNjb2RlcHJvamVjdHMvdnVlcHJlc3MtdGhlbWUtcmVjby9teWJsb2dzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiOwoKLyohCiAgKiB2dWUtcm91dGVyIHYzLjUuMQogICogKGMpIDIwMjEgRXZhbiBZb3UKICAqIEBsaWNlbnNlIE1JVAogICovCgovKiAgKi8KZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogIGlmICghY29uZGl0aW9uKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIlt2dWUtcm91dGVyXSAiICsgbWVzc2FnZSk7CiAgfQp9CgpmdW5jdGlvbiB3YXJuKGNvbmRpdGlvbiwgbWVzc2FnZSkgewogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHsKICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oIlt2dWUtcm91dGVyXSAiICsgbWVzc2FnZSk7CiAgfQp9CgpmdW5jdGlvbiBleHRlbmQoYSwgYikgewogIGZvciAodmFyIGtleSBpbiBiKSB7CiAgICBhW2tleV0gPSBiW2tleV07CiAgfQoKICByZXR1cm4gYTsKfQovKiAgKi8KCgp2YXIgZW5jb2RlUmVzZXJ2ZVJFID0gL1shJygpKl0vZzsKCnZhciBlbmNvZGVSZXNlcnZlUmVwbGFjZXIgPSBmdW5jdGlvbiBlbmNvZGVSZXNlcnZlUmVwbGFjZXIoYykgewogIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOwp9OwoKdmFyIGNvbW1hUkUgPSAvJTJDL2c7IC8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4NjoKLy8gLSBlc2NhcGVzIFshJygpKl0KLy8gLSBwcmVzZXJ2ZSBjb21tYXMKCnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyKSB7CiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoZW5jb2RlUmVzZXJ2ZVJFLCBlbmNvZGVSZXNlcnZlUmVwbGFjZXIpLnJlcGxhY2UoY29tbWFSRSwgJywnKTsKfTsKCmZ1bmN0aW9uIGRlY29kZShzdHIpIHsKICB0cnkgewogICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpOwogIH0gY2F0Y2ggKGVycikgewogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgd2FybihmYWxzZSwgIkVycm9yIGRlY29kaW5nIFwiIiArIHN0ciArICJcIi4gTGVhdmluZyBpdCBpbnRhY3QuIik7CiAgICB9CiAgfQoKICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiByZXNvbHZlUXVlcnkocXVlcnksIGV4dHJhUXVlcnksIF9wYXJzZVF1ZXJ5KSB7CiAgaWYgKGV4dHJhUXVlcnkgPT09IHZvaWQgMCkgZXh0cmFRdWVyeSA9IHt9OwogIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7CiAgdmFyIHBhcnNlZFF1ZXJ5OwoKICB0cnkgewogICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7CiAgfSBjYXRjaCAoZSkgewogICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBlLm1lc3NhZ2UpOwogICAgcGFyc2VkUXVlcnkgPSB7fTsKICB9CgogIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7CiAgICB2YXIgdmFsdWUgPSBleHRyYVF1ZXJ5W2tleV07CiAgICBwYXJzZWRRdWVyeVtrZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoY2FzdFF1ZXJ5UGFyYW1WYWx1ZSkgOiBjYXN0UXVlcnlQYXJhbVZhbHVlKHZhbHVlKTsKICB9CgogIHJldHVybiBwYXJzZWRRdWVyeTsKfQoKdmFyIGNhc3RRdWVyeVBhcmFtVmFsdWUgPSBmdW5jdGlvbiBjYXN0UXVlcnlQYXJhbVZhbHVlKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpOwp9OwoKZnVuY3Rpb24gcGFyc2VRdWVyeShxdWVyeSkgewogIHZhciByZXMgPSB7fTsKICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9eKFw/fCN8JikvLCAnJyk7CgogIGlmICghcXVlcnkpIHsKICAgIHJldHVybiByZXM7CiAgfQoKICBxdWVyeS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7CiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cKy9nLCAnICcpLnNwbGl0KCc9Jyk7CiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpOwogICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBkZWNvZGUocGFydHMuam9pbignPScpKSA6IG51bGw7CgogICAgaWYgKHJlc1trZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgcmVzW2tleV0gPSB2YWw7CiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzW2tleV0pKSB7CiAgICAgIHJlc1trZXldLnB1c2godmFsKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc1trZXldID0gW3Jlc1trZXldLCB2YWxdOwogICAgfQogIH0pOwogIHJldHVybiByZXM7Cn0KCmZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5KG9iaikgewogIHZhciByZXMgPSBvYmogPyBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICB2YXIgdmFsID0gb2JqW2tleV07CgogICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICBpZiAodmFsID09PSBudWxsKSB7CiAgICAgIHJldHVybiBlbmNvZGUoa2V5KTsKICAgIH0KCiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHsKICAgICAgICBpZiAodmFsMiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAodmFsMiA9PT0gbnVsbCkgewogICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwyKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJyk7CiAgICB9CgogICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbCk7CiAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7CiAgICByZXR1cm4geC5sZW5ndGggPiAwOwogIH0pLmpvaW4oJyYnKSA6IG51bGw7CiAgcmV0dXJuIHJlcyA/ICI/IiArIHJlcyA6ICcnOwp9Ci8qICAqLwoKCnZhciB0cmFpbGluZ1NsYXNoUkUgPSAvXC8/JC87CgpmdW5jdGlvbiBjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSwgcm91dGVyKSB7CiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5OwogIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9OwoKICB0cnkgewogICAgcXVlcnkgPSBjbG9uZShxdWVyeSk7CiAgfSBjYXRjaCAoZSkge30KCiAgdmFyIHJvdXRlID0gewogICAgbmFtZTogbG9jYXRpb24ubmFtZSB8fCByZWNvcmQgJiYgcmVjb3JkLm5hbWUsCiAgICBtZXRhOiByZWNvcmQgJiYgcmVjb3JkLm1ldGEgfHwge30sCiAgICBwYXRoOiBsb2NhdGlvbi5wYXRoIHx8ICcvJywKICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsCiAgICBxdWVyeTogcXVlcnksCiAgICBwYXJhbXM6IGxvY2F0aW9uLnBhcmFtcyB8fCB7fSwKICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLAogICAgbWF0Y2hlZDogcmVjb3JkID8gZm9ybWF0TWF0Y2gocmVjb3JkKSA6IFtdCiAgfTsKCiAgaWYgKHJlZGlyZWN0ZWRGcm9tKSB7CiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7CiAgfQoKICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyb3V0ZSk7Cn0KCmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKTsKICB9IGVsc2UgaWYgKHZhbHVlICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JykgewogICAgdmFyIHJlcyA9IHt9OwoKICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgewogICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfSBlbHNlIHsKICAgIHJldHVybiB2YWx1ZTsKICB9Cn0gLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZQoKCnZhciBTVEFSVCA9IGNyZWF0ZVJvdXRlKG51bGwsIHsKICBwYXRoOiAnLycKfSk7CgpmdW5jdGlvbiBmb3JtYXRNYXRjaChyZWNvcmQpIHsKICB2YXIgcmVzID0gW107CgogIHdoaWxlIChyZWNvcmQpIHsKICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7CiAgICByZWNvcmQgPSByZWNvcmQucGFyZW50OwogIH0KCiAgcmV0dXJuIHJlczsKfQoKZnVuY3Rpb24gZ2V0RnVsbFBhdGgocmVmLCBfc3RyaW5naWZ5UXVlcnkpIHsKICB2YXIgcGF0aCA9IHJlZi5wYXRoOwogIHZhciBxdWVyeSA9IHJlZi5xdWVyeTsKICBpZiAocXVlcnkgPT09IHZvaWQgMCkgcXVlcnkgPSB7fTsKICB2YXIgaGFzaCA9IHJlZi5oYXNoOwogIGlmIChoYXNoID09PSB2b2lkIDApIGhhc2ggPSAnJzsKICB2YXIgc3RyaW5naWZ5ID0gX3N0cmluZ2lmeVF1ZXJ5IHx8IHN0cmluZ2lmeVF1ZXJ5OwogIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2g7Cn0KCmZ1bmN0aW9uIGlzU2FtZVJvdXRlKGEsIGIsIG9ubHlQYXRoKSB7CiAgaWYgKGIgPT09IFNUQVJUKSB7CiAgICByZXR1cm4gYSA9PT0gYjsKICB9IGVsc2UgaWYgKCFiKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSBlbHNlIGlmIChhLnBhdGggJiYgYi5wYXRoKSB7CiAgICByZXR1cm4gYS5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgPT09IGIucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpICYmIChvbmx5UGF0aCB8fCBhLmhhc2ggPT09IGIuaGFzaCAmJiBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpKTsKICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHsKICAgIHJldHVybiBhLm5hbWUgPT09IGIubmFtZSAmJiAob25seVBhdGggfHwgYS5oYXNoID09PSBiLmhhc2ggJiYgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KSAmJiBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcykpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9CgpmdW5jdGlvbiBpc09iamVjdEVxdWFsKGEsIGIpIHsKICBpZiAoYSA9PT0gdm9pZCAwKSBhID0ge307CiAgaWYgKGIgPT09IHZvaWQgMCkgYiA9IHt9OyAvLyBoYW5kbGUgbnVsbCB2YWx1ZSAjMTU2NgoKICBpZiAoIWEgfHwgIWIpIHsKICAgIHJldHVybiBhID09PSBiOwogIH0KCiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSkuc29ydCgpOwogIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpLnNvcnQoKTsKCiAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkgewogICAgdmFyIGFWYWwgPSBhW2tleV07CiAgICB2YXIgYktleSA9IGJLZXlzW2ldOwoKICAgIGlmIChiS2V5ICE9PSBrZXkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHZhciBiVmFsID0gYltrZXldOyAvLyBxdWVyeSB2YWx1ZXMgY2FuIGJlIG51bGwgYW5kIHVuZGVmaW5lZAoKICAgIGlmIChhVmFsID09IG51bGwgfHwgYlZhbCA9PSBudWxsKSB7CiAgICAgIHJldHVybiBhVmFsID09PSBiVmFsOwogICAgfSAvLyBjaGVjayBuZXN0ZWQgZXF1YWxpdHkKCgogICAgaWYgKF90eXBlb2YoYVZhbCkgPT09ICdvYmplY3QnICYmIF90eXBlb2YoYlZhbCkgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBpc09iamVjdEVxdWFsKGFWYWwsIGJWYWwpOwogICAgfQoKICAgIHJldHVybiBTdHJpbmcoYVZhbCkgPT09IFN0cmluZyhiVmFsKTsKICB9KTsKfQoKZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlKGN1cnJlbnQsIHRhcmdldCkgewogIHJldHVybiBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZih0YXJnZXQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKSkgPT09IDAgJiYgKCF0YXJnZXQuaGFzaCB8fCBjdXJyZW50Lmhhc2ggPT09IHRhcmdldC5oYXNoKSAmJiBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSk7Cn0KCmZ1bmN0aW9uIHF1ZXJ5SW5jbHVkZXMoY3VycmVudCwgdGFyZ2V0KSB7CiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkgewogICAgaWYgKCEoa2V5IGluIGN1cnJlbnQpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBoYW5kbGVSb3V0ZUVudGVyZWQocm91dGUpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHJvdXRlLm1hdGNoZWQubGVuZ3RoOyBpKyspIHsKICAgIHZhciByZWNvcmQgPSByb3V0ZS5tYXRjaGVkW2ldOwoKICAgIGZvciAodmFyIG5hbWUgaW4gcmVjb3JkLmluc3RhbmNlcykgewogICAgICB2YXIgaW5zdGFuY2UgPSByZWNvcmQuaW5zdGFuY2VzW25hbWVdOwogICAgICB2YXIgY2JzID0gcmVjb3JkLmVudGVyZWRDYnNbbmFtZV07CgogICAgICBpZiAoIWluc3RhbmNlIHx8ICFjYnMpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgZGVsZXRlIHJlY29yZC5lbnRlcmVkQ2JzW25hbWVdOwoKICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmxlbmd0aDsgaSQxKyspIHsKICAgICAgICBpZiAoIWluc3RhbmNlLl9pc0JlaW5nRGVzdHJveWVkKSB7CiAgICAgICAgICBjYnNbaSQxXShpbnN0YW5jZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cgp2YXIgVmlldyA9IHsKICBuYW1lOiAnUm91dGVyVmlldycsCiAgZnVuY3Rpb25hbDogdHJ1ZSwKICBwcm9wczogewogICAgbmFtZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICJkZWZhdWx0IjogJ2RlZmF1bHQnCiAgICB9CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfLCByZWYpIHsKICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wczsKICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjsKICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50OwogICAgdmFyIGRhdGEgPSByZWYuZGF0YTsgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2UKCiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlOyAvLyBkaXJlY3RseSB1c2UgcGFyZW50IGNvbnRleHQncyBjcmVhdGVFbGVtZW50KCkgZnVuY3Rpb24KICAgIC8vIHNvIHRoYXQgY29tcG9uZW50cyByZW5kZXJlZCBieSByb3V0ZXItdmlldyBjYW4gcmVzb2x2ZSBuYW1lZCBzbG90cwoKICAgIHZhciBoID0gcGFyZW50LiRjcmVhdGVFbGVtZW50OwogICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lOwogICAgdmFyIHJvdXRlID0gcGFyZW50LiRyb3V0ZTsKICAgIHZhciBjYWNoZSA9IHBhcmVudC5fcm91dGVyVmlld0NhY2hlIHx8IChwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSA9IHt9KTsgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWUKICAgIC8vIGhhcyBiZWVuIHRvZ2dsZWQgaW5hY3RpdmUgYnV0IGtlcHQtYWxpdmUuCgogICAgdmFyIGRlcHRoID0gMDsKICAgIHZhciBpbmFjdGl2ZSA9IGZhbHNlOwoKICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50Ll9yb3V0ZXJSb290ICE9PSBwYXJlbnQpIHsKICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgPyBwYXJlbnQuJHZub2RlLmRhdGEgOiB7fTsKCiAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykgewogICAgICAgIGRlcHRoKys7CiAgICAgIH0KCiAgICAgIGlmICh2bm9kZURhdGEua2VlcEFsaXZlICYmIHBhcmVudC5fZGlyZWN0SW5hY3RpdmUgJiYgcGFyZW50Ll9pbmFjdGl2ZSkgewogICAgICAgIGluYWN0aXZlID0gdHJ1ZTsKICAgICAgfQoKICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7CiAgICB9CgogICAgZGF0YS5yb3V0ZXJWaWV3RGVwdGggPSBkZXB0aDsgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmUKCiAgICBpZiAoaW5hY3RpdmUpIHsKICAgICAgdmFyIGNhY2hlZERhdGEgPSBjYWNoZVtuYW1lXTsKICAgICAgdmFyIGNhY2hlZENvbXBvbmVudCA9IGNhY2hlZERhdGEgJiYgY2FjaGVkRGF0YS5jb21wb25lbnQ7CgogICAgICBpZiAoY2FjaGVkQ29tcG9uZW50KSB7CiAgICAgICAgLy8gIzIzMDEKICAgICAgICAvLyBwYXNzIHByb3BzCiAgICAgICAgaWYgKGNhY2hlZERhdGEuY29uZmlnUHJvcHMpIHsKICAgICAgICAgIGZpbGxQcm9wc2luRGF0YShjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNhY2hlZERhdGEucm91dGUsIGNhY2hlZERhdGEuY29uZmlnUHJvcHMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGgoY2FjaGVkQ29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gcmVuZGVyIHByZXZpb3VzIGVtcHR5IHZpZXcKICAgICAgICByZXR1cm4gaCgpOwogICAgICB9CiAgICB9CgogICAgdmFyIG1hdGNoZWQgPSByb3V0ZS5tYXRjaGVkW2RlcHRoXTsKICAgIHZhciBjb21wb25lbnQgPSBtYXRjaGVkICYmIG1hdGNoZWQuY29tcG9uZW50c1tuYW1lXTsgLy8gcmVuZGVyIGVtcHR5IG5vZGUgaWYgbm8gbWF0Y2hlZCByb3V0ZSBvciBubyBjb25maWcgY29tcG9uZW50CgogICAgaWYgKCFtYXRjaGVkIHx8ICFjb21wb25lbnQpIHsKICAgICAgY2FjaGVbbmFtZV0gPSBudWxsOwogICAgICByZXR1cm4gaCgpOwogICAgfSAvLyBjYWNoZSBjb21wb25lbnQKCgogICAgY2FjaGVbbmFtZV0gPSB7CiAgICAgIGNvbXBvbmVudDogY29tcG9uZW50CiAgICB9OyAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2sKICAgIC8vIHRoaXMgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGluc3RhbmNlJ3MgaW5qZWN0ZWQgbGlmZWN5Y2xlIGhvb2tzCgogICAgZGF0YS5yZWdpc3RlclJvdXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIHZhbCkgewogICAgICAvLyB2YWwgY291bGQgYmUgdW5kZWZpbmVkIGZvciB1bnJlZ2lzdHJhdGlvbgogICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdOwoKICAgICAgaWYgKHZhbCAmJiBjdXJyZW50ICE9PSB2bSB8fCAhdmFsICYmIGN1cnJlbnQgPT09IHZtKSB7CiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2YWw7CiAgICAgIH0KICAgIH0gLy8gYWxzbyByZWdpc3RlciBpbnN0YW5jZSBpbiBwcmVwYXRjaCBob29rCiAgICAvLyBpbiBjYXNlIHRoZSBzYW1lIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCByb3V0ZXMKICAgIDsKCiAgICAoZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSkpLnByZXBhdGNoID0gZnVuY3Rpb24gKF8sIHZub2RlKSB7CiAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CiAgICB9OyAvLyByZWdpc3RlciBpbnN0YW5jZSBpbiBpbml0IGhvb2sKICAgIC8vIGluIGNhc2Uga2VwdC1hbGl2ZSBjb21wb25lbnQgYmUgYWN0aXZlZCB3aGVuIHJvdXRlcyBjaGFuZ2VkCgoKICAgIGRhdGEuaG9vay5pbml0ID0gZnVuY3Rpb24gKHZub2RlKSB7CiAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSAmJiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAhPT0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0pIHsKICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlOwogICAgICB9IC8vIGlmIHRoZSByb3V0ZSB0cmFuc2l0aW9uIGhhcyBhbHJlYWR5IGJlZW4gY29uZmlybWVkIHRoZW4gd2Ugd2VyZW4ndAogICAgICAvLyBhYmxlIHRvIGNhbGwgdGhlIGNicyBkdXJpbmcgY29uZmlybWF0aW9uIGFzIHRoZSBjb21wb25lbnQgd2FzIG5vdAogICAgICAvLyByZWdpc3RlcmVkIHlldCwgc28gd2UgY2FsbCBpdCBoZXJlLgoKCiAgICAgIGhhbmRsZVJvdXRlRW50ZXJlZChyb3V0ZSk7CiAgICB9OwoKICAgIHZhciBjb25maWdQcm9wcyA9IG1hdGNoZWQucHJvcHMgJiYgbWF0Y2hlZC5wcm9wc1tuYW1lXTsgLy8gc2F2ZSByb3V0ZSBhbmQgY29uZmlnUHJvcHMgaW4gY2FjaGUKCiAgICBpZiAoY29uZmlnUHJvcHMpIHsKICAgICAgZXh0ZW5kKGNhY2hlW25hbWVdLCB7CiAgICAgICAgcm91dGU6IHJvdXRlLAogICAgICAgIGNvbmZpZ1Byb3BzOiBjb25maWdQcm9wcwogICAgICB9KTsKICAgICAgZmlsbFByb3BzaW5EYXRhKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKTsKICAgIH0KCiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKTsKICB9Cn07CgpmdW5jdGlvbiBmaWxsUHJvcHNpbkRhdGEoY29tcG9uZW50LCBkYXRhLCByb3V0ZSwgY29uZmlnUHJvcHMpIHsKICAvLyByZXNvbHZlIHByb3BzCiAgdmFyIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IHJlc29sdmVQcm9wcyhyb3V0ZSwgY29uZmlnUHJvcHMpOwoKICBpZiAocHJvcHNUb1Bhc3MpIHsKICAgIC8vIGNsb25lIHRvIHByZXZlbnQgbXV0YXRpb24KICAgIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHNUb1Bhc3MpOyAvLyBwYXNzIG5vbi1kZWNsYXJlZCBwcm9wcyBhcyBhdHRycwoKICAgIHZhciBhdHRycyA9IGRhdGEuYXR0cnMgPSBkYXRhLmF0dHJzIHx8IHt9OwoKICAgIGZvciAodmFyIGtleSBpbiBwcm9wc1RvUGFzcykgewogICAgICBpZiAoIWNvbXBvbmVudC5wcm9wcyB8fCAhKGtleSBpbiBjb21wb25lbnQucHJvcHMpKSB7CiAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07CiAgICAgICAgZGVsZXRlIHByb3BzVG9QYXNzW2tleV07CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHJlc29sdmVQcm9wcyhyb3V0ZSwgY29uZmlnKSB7CiAgc3dpdGNoIChfdHlwZW9mKGNvbmZpZykpIHsKICAgIGNhc2UgJ3VuZGVmaW5lZCc6CiAgICAgIHJldHVybjsKCiAgICBjYXNlICdvYmplY3QnOgogICAgICByZXR1cm4gY29uZmlnOwoKICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSk7CgogICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWQ7CgogICAgZGVmYXVsdDoKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKGZhbHNlLCAicHJvcHMgaW4gXCIiICsgcm91dGUucGF0aCArICJcIiBpcyBhICIgKyBfdHlwZW9mKGNvbmZpZykgKyAiLCAiICsgImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uIik7CiAgICAgIH0KCiAgfQp9Ci8qICAqLwoKCmZ1bmN0aW9uIHJlc29sdmVQYXRoKHJlbGF0aXZlLCBiYXNlLCBhcHBlbmQpIHsKICB2YXIgZmlyc3RDaGFyID0gcmVsYXRpdmUuY2hhckF0KDApOwoKICBpZiAoZmlyc3RDaGFyID09PSAnLycpIHsKICAgIHJldHVybiByZWxhdGl2ZTsKICB9CgogIGlmIChmaXJzdENoYXIgPT09ICc/JyB8fCBmaXJzdENoYXIgPT09ICcjJykgewogICAgcmV0dXJuIGJhc2UgKyByZWxhdGl2ZTsKICB9CgogIHZhciBzdGFjayA9IGJhc2Uuc3BsaXQoJy8nKTsgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6CiAgLy8gLSBub3QgYXBwZW5kaW5nCiAgLy8gLSBhcHBlbmRpbmcgdG8gdHJhaWxpbmcgc2xhc2ggKGxhc3Qgc2VnbWVudCBpcyBlbXB0eSkKCiAgaWYgKCFhcHBlbmQgfHwgIXN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdKSB7CiAgICBzdGFjay5wb3AoKTsKICB9IC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aAoKCiAgdmFyIHNlZ21lbnRzID0gcmVsYXRpdmUucmVwbGFjZSgvXlwvLywgJycpLnNwbGl0KCcvJyk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07CgogICAgaWYgKHNlZ21lbnQgPT09ICcuLicpIHsKICAgICAgc3RhY2sucG9wKCk7CiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykgewogICAgICBzdGFjay5wdXNoKHNlZ21lbnQpOwogICAgfQogIH0gLy8gZW5zdXJlIGxlYWRpbmcgc2xhc2gKCgogIGlmIChzdGFja1swXSAhPT0gJycpIHsKICAgIHN0YWNrLnVuc2hpZnQoJycpOwogIH0KCiAgcmV0dXJuIHN0YWNrLmpvaW4oJy8nKTsKfQoKZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHsKICB2YXIgaGFzaCA9ICcnOwogIHZhciBxdWVyeSA9ICcnOwogIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTsKCiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7CiAgICBoYXNoID0gcGF0aC5zbGljZShoYXNoSW5kZXgpOwogICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTsKICB9CgogIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7CgogIGlmIChxdWVyeUluZGV4ID49IDApIHsKICAgIHF1ZXJ5ID0gcGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSk7CiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUluZGV4KTsKICB9CgogIHJldHVybiB7CiAgICBwYXRoOiBwYXRoLAogICAgcXVlcnk6IHF1ZXJ5LAogICAgaGFzaDogaGFzaAogIH07Cn0KCmZ1bmN0aW9uIGNsZWFuUGF0aChwYXRoKSB7CiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXC9cLy9nLCAnLycpOwp9Cgp2YXIgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nOwp9OwovKioKICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLgogKi8KCgp2YXIgcGF0aFRvUmVnZXhwXzEgPSBwYXRoVG9SZWdleHA7CnZhciBwYXJzZV8xID0gcGFyc2U7CnZhciBjb21waWxlXzEgPSBjb21waWxlOwp2YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjsKdmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDsKLyoqCiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuCiAqCiAqIEB0eXBlIHtSZWdFeHB9CiAqLwoKdmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy4KLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS4KJyhcXFxcLiknLCAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeAovLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOgovLwovLyAiLzp0ZXN0KFxcZCspPyIgPT4gWyIvIiwgInRlc3QiLCAiXGQrIiwgdW5kZWZpbmVkLCAiPyIsIHVuZGVmaW5lZF0KLy8gIi9yb3V0ZShcXGQrKSIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAiXGQrIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdCi8vICIvKiIgICAgICAgICAgICA9PiBbIi8iLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsICIqIl0KJyhbXFwvLl0pPyg/Oig/OlxcOihcXHcrKSg/OlxcKCgoPzpcXFxcLnxbXlxcXFwoKV0pKylcXCkpP3xcXCgoKD86XFxcXC58W15cXFxcKCldKSspXFwpKShbKyo/XSk/fChcXCopKSddLmpvaW4oJ3wnKSwgJ2cnKTsKLyoqCiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy4KICoKICogQHBhcmFtICB7c3RyaW5nfSAgc3RyCiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnMKICogQHJldHVybiB7IUFycmF5fQogKi8KCmZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0aW9ucykgewogIHZhciB0b2tlbnMgPSBbXTsKICB2YXIga2V5ID0gMDsKICB2YXIgaW5kZXggPSAwOwogIHZhciBwYXRoID0gJyc7CiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJzsKICB2YXIgcmVzOwoKICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkgewogICAgdmFyIG0gPSByZXNbMF07CiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXTsKICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7CiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTsKICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGg7IC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLgoKICAgIGlmIChlc2NhcGVkKSB7CiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdOwogICAgdmFyIHByZWZpeCA9IHJlc1syXTsKICAgIHZhciBuYW1lID0gcmVzWzNdOwogICAgdmFyIGNhcHR1cmUgPSByZXNbNF07CiAgICB2YXIgZ3JvdXAgPSByZXNbNV07CiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07CiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107IC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuCgogICAgaWYgKHBhdGgpIHsKICAgICAgdG9rZW5zLnB1c2gocGF0aCk7CiAgICAgIHBhdGggPSAnJzsKICAgIH0KCiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7CiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonOwogICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonOwogICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyOwogICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwOwogICAgdG9rZW5zLnB1c2goewogICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLAogICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJywKICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsCiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCwKICAgICAgcmVwZWF0OiByZXBlYXQsCiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsCiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLAogICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiBhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JwogICAgfSk7CiAgfSAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuCgoKICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7CiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpOwogIH0gLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC4KCgogIGlmIChwYXRoKSB7CiAgICB0b2tlbnMucHVzaChwYXRoKTsKICB9CgogIHJldHVybiB0b2tlbnM7Cn0KLyoqCiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguCiAqCiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyCiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9ucwogKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9CiAqLwoKCmZ1bmN0aW9uIGNvbXBpbGUoc3RyLCBvcHRpb25zKSB7CiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucyk7Cn0KLyoqCiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLgogKgogKiBAcGFyYW0gIHtzdHJpbmd9CiAqIEByZXR1cm4ge3N0cmluZ30KICovCgoKZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5KHN0cikgewogIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXC8/I10vZywgZnVuY3Rpb24gKGMpIHsKICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7CiAgfSk7Cn0KLyoqCiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuCiAqCiAqIEBwYXJhbSAge3N0cmluZ30KICogQHJldHVybiB7c3RyaW5nfQogKi8KCgpmdW5jdGlvbiBlbmNvZGVBc3RlcmlzayhzdHIpIHsKICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykgewogICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsKICB9KTsKfQovKioKICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24odG9rZW5zLCBvcHRpb25zKSB7CiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuCiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7IC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uCgogIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoX3R5cGVvZih0b2tlbnNbaV0pID09PSAnb2JqZWN0JykgewogICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7CiAgICB2YXIgcGF0aCA9ICcnOwogICAgdmFyIGRhdGEgPSBvYmogfHwge307CiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307CiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnQ7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldOwoKICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHsKICAgICAgICBwYXRoICs9IHRva2VuOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdOwogICAgICB2YXIgc2VnbWVudDsKCiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7CiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7CiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy4KICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7CiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4OwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAiJyArIHRva2VuLm5hbWUgKyAnIiB0byBiZSBkZWZpbmVkJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHsKICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgIicgKyB0b2tlbi5uYW1lICsgJyIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKTsKICAgICAgICB9CgogICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICInICsgdG9rZW4ubmFtZSArICciIHRvIG5vdCBiZSBlbXB0eScpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykgewogICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSk7CgogICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsICInICsgdG9rZW4ubmFtZSArICciIHRvIG1hdGNoICInICsgdG9rZW4ucGF0dGVybiArICciLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJyk7CiAgICAgICAgICB9CgogICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50OwogICAgICAgIH0KCiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7CgogICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICInICsgdG9rZW4ubmFtZSArICciIHRvIG1hdGNoICInICsgdG9rZW4ucGF0dGVybiArICciLCBidXQgcmVjZWl2ZWQgIicgKyBzZWdtZW50ICsgJyInKTsKICAgICAgfQoKICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50OwogICAgfQoKICAgIHJldHVybiBwYXRoOwogIH07Cn0KLyoqCiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuCiAqCiAqIEBwYXJhbSAge3N0cmluZ30gc3RyCiAqIEByZXR1cm4ge3N0cmluZ30KICovCgoKZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cikgewogIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xdfFwvXFxdKS9nLCAnXFwkMScpOwp9Ci8qKgogKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuCiAqCiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXAKICogQHJldHVybiB7c3RyaW5nfQogKi8KCgpmdW5jdGlvbiBlc2NhcGVHcm91cChncm91cCkgewogIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcLygpXSkvZywgJ1xcJDEnKTsKfQovKioKICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC4KICoKICogQHBhcmFtICB7IVJlZ0V4cH0gcmUKICogQHBhcmFtICB7QXJyYXl9ICAga2V5cwogKiBAcmV0dXJuIHshUmVnRXhwfQogKi8KCgpmdW5jdGlvbiBhdHRhY2hLZXlzKHJlLCBrZXlzKSB7CiAgcmUua2V5cyA9IGtleXM7CiAgcmV0dXJuIHJlOwp9Ci8qKgogKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLgogKgogKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMKICogQHJldHVybiB7c3RyaW5nfQogKi8KCgpmdW5jdGlvbiBmbGFncyhvcHRpb25zKSB7CiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJzsKfQovKioKICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLgogKgogKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoCiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXMKICogQHJldHVybiB7IVJlZ0V4cH0KICovCgoKZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAocGF0aCwga2V5cykgewogIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuCiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cKCg/IVw/KS9nKTsKCiAgaWYgKGdyb3VwcykgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHsKICAgICAga2V5cy5wdXNoKHsKICAgICAgICBuYW1lOiBpLAogICAgICAgIHByZWZpeDogbnVsbCwKICAgICAgICBkZWxpbWl0ZXI6IG51bGwsCiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLAogICAgICAgIHJlcGVhdDogZmFsc2UsCiAgICAgICAgcGFydGlhbDogZmFsc2UsCiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLAogICAgICAgIHBhdHRlcm46IG51bGwKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKTsKfQovKioKICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuCiAqCiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGgKICogQHBhcmFtICB7QXJyYXl9ICAga2V5cwogKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zCiAqIEByZXR1cm4geyFSZWdFeHB9CiAqLwoKCmZ1bmN0aW9uIGFycmF5VG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucykgewogIHZhciBwYXJ0cyA9IFtdOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHsKICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7CiAgfQoKICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpOwogIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cyk7Cn0KLyoqCiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LgogKgogKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoCiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXMKICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9ucwogKiBAcmV0dXJuIHshUmVnRXhwfQogKi8KCgpmdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7CiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKTsKfQovKioKICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC4KICoKICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnMKICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzCiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9ucwogKiBAcmV0dXJuIHshUmVnRXhwfQogKi8KCgpmdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHsKICBpZiAoIWlzYXJyYXkoa2V5cykpIHsKICAgIG9wdGlvbnMgPQogICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqLwogICAga2V5cyB8fCBvcHRpb25zOwogICAga2V5cyA9IFtdOwogIH0KCiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OwogIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7CiAgdmFyIHJvdXRlID0gJyc7IC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuCgogIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07CgogICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHsKICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTsKICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSc7CiAgICAgIGtleXMucHVzaCh0b2tlbik7CgogICAgICBpZiAodG9rZW4ucmVwZWF0KSB7CiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonOwogICAgICB9CgogICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHsKICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHsKICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/JzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJzsKICAgICAgfQoKICAgICAgcm91dGUgKz0gY2FwdHVyZTsKICAgIH0KICB9CgogIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKTsKICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlcjsgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG8KICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2gKICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50CiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSAiL3Rlc3QvIiBzaG91bGRuJ3QgbWF0Y2ggIi90ZXN0Ly9yb3V0ZSIuCgogIGlmICghc3RyaWN0KSB7CiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nOwogIH0KCiAgaWYgKGVuZCkgewogICAgcm91dGUgKz0gJyQnOwogIH0gZWxzZSB7CiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhcwogICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC4KICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJzsKICB9CgogIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cyk7Cn0KLyoqCiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICoKICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGUKICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbAogKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC4KICoKICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoCiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5cwogKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnMKICogQHJldHVybiB7IVJlZ0V4cH0KICovCgoKZnVuY3Rpb24gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpIHsKICBpZiAoIWlzYXJyYXkoa2V5cykpIHsKICAgIG9wdGlvbnMgPQogICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqLwogICAga2V5cyB8fCBvcHRpb25zOwogICAga2V5cyA9IFtdOwogIH0KCiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7CiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwKICAgIC8qKiBAdHlwZSB7IUFycmF5fSAqLwogICAga2V5cyk7CiAgfQoKICBpZiAoaXNhcnJheShwYXRoKSkgewogICAgcmV0dXJuIGFycmF5VG9SZWdleHAoCiAgICAvKiogQHR5cGUgeyFBcnJheX0gKi8KICAgIHBhdGgsCiAgICAvKiogQHR5cGUgeyFBcnJheX0gKi8KICAgIGtleXMsIG9wdGlvbnMpOwogIH0KCiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKAogIC8qKiBAdHlwZSB7c3RyaW5nfSAqLwogIHBhdGgsCiAgLyoqIEB0eXBlIHshQXJyYXl9ICovCiAga2V5cywgb3B0aW9ucyk7Cn0KCnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTsKcGF0aFRvUmVnZXhwXzEuY29tcGlsZSA9IGNvbXBpbGVfMTsKcGF0aFRvUmVnZXhwXzEudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25fMTsKcGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xOwovKiAgKi8KLy8gJGZsb3ctZGlzYWJsZS1saW5lCgp2YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKCmZ1bmN0aW9uIGZpbGxQYXJhbXMocGF0aCwgcGFyYW1zLCByb3V0ZU1zZykgewogIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTsKCiAgdHJ5IHsKICAgIHZhciBmaWxsZXIgPSByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHwgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpOyAvLyBGaXggIzI1MDUgcmVzb2x2aW5nIGFzdGVyaXNrIHJvdXRlcyB7IG5hbWU6ICdub3QtZm91bmQnLCBwYXJhbXM6IHsgcGF0aE1hdGNoOiAnL25vdC1mb3VuZCcgfX0KICAgIC8vIGFuZCBmaXggIzMxMDYgc28gdGhhdCB5b3UgY2FuIHdvcmsgd2l0aCBsb2NhdGlvbiBkZXNjcmlwdG9yIG9iamVjdCBoYXZpbmcgcGFyYW1zLnBhdGhNYXRjaCBlcXVhbCB0byBlbXB0eSBzdHJpbmcKCiAgICBpZiAodHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnKSB7CiAgICAgIHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7CiAgICB9CgogICAgcmV0dXJuIGZpbGxlcihwYXJhbXMsIHsKICAgICAgcHJldHR5OiB0cnVlCiAgICB9KTsKICB9IGNhdGNoIChlKSB7CiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAvLyBGaXggIzMwNzIgbm8gd2FybiBpZiBgcGF0aE1hdGNoYCBpcyBzdHJpbmcKICAgICAgd2Fybih0eXBlb2YgcGFyYW1zLnBhdGhNYXRjaCA9PT0gJ3N0cmluZycsICJtaXNzaW5nIHBhcmFtIGZvciAiICsgcm91dGVNc2cgKyAiOiAiICsgZS5tZXNzYWdlKTsKICAgIH0KCiAgICByZXR1cm4gJyc7CiAgfSBmaW5hbGx5IHsKICAgIC8vIGRlbGV0ZSB0aGUgMCBpZiBpdCB3YXMgYWRkZWQKICAgIGRlbGV0ZSBwYXJhbXNbMF07CiAgfQp9Ci8qICAqLwoKCmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudCwgYXBwZW5kLCByb3V0ZXIpIHsKICB2YXIgbmV4dCA9IHR5cGVvZiByYXcgPT09ICdzdHJpbmcnID8gewogICAgcGF0aDogcmF3CiAgfSA6IHJhdzsgLy8gbmFtZWQgdGFyZ2V0CgogIGlmIChuZXh0Ll9ub3JtYWxpemVkKSB7CiAgICByZXR1cm4gbmV4dDsKICB9IGVsc2UgaWYgKG5leHQubmFtZSkgewogICAgbmV4dCA9IGV4dGVuZCh7fSwgcmF3KTsKICAgIHZhciBwYXJhbXMgPSBuZXh0LnBhcmFtczsKCiAgICBpZiAocGFyYW1zICYmIF90eXBlb2YocGFyYW1zKSA9PT0gJ29iamVjdCcpIHsKICAgICAgbmV4dC5wYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7CiAgICB9CgogICAgcmV0dXJuIG5leHQ7CiAgfSAvLyByZWxhdGl2ZSBwYXJhbXMKCgogIGlmICghbmV4dC5wYXRoICYmIG5leHQucGFyYW1zICYmIGN1cnJlbnQpIHsKICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpOwogICAgbmV4dC5fbm9ybWFsaXplZCA9IHRydWU7CiAgICB2YXIgcGFyYW1zJDEgPSBleHRlbmQoZXh0ZW5kKHt9LCBjdXJyZW50LnBhcmFtcyksIG5leHQucGFyYW1zKTsKCiAgICBpZiAoY3VycmVudC5uYW1lKSB7CiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTsKICAgICAgbmV4dC5wYXJhbXMgPSBwYXJhbXMkMTsKICAgIH0gZWxzZSBpZiAoY3VycmVudC5tYXRjaGVkLmxlbmd0aCkgewogICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDsKICAgICAgbmV4dC5wYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMkMSwgInBhdGggIiArIGN1cnJlbnQucGF0aCk7CiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgd2FybihmYWxzZSwgInJlbGF0aXZlIHBhcmFtcyBuYXZpZ2F0aW9uIHJlcXVpcmVzIGEgY3VycmVudCByb3V0ZS4iKTsKICAgIH0KCiAgICByZXR1cm4gbmV4dDsKICB9CgogIHZhciBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKG5leHQucGF0aCB8fCAnJyk7CiAgdmFyIGJhc2VQYXRoID0gY3VycmVudCAmJiBjdXJyZW50LnBhdGggfHwgJy8nOwogIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoID8gcmVzb2x2ZVBhdGgocGFyc2VkUGF0aC5wYXRoLCBiYXNlUGF0aCwgYXBwZW5kIHx8IG5leHQuYXBwZW5kKSA6IGJhc2VQYXRoOwogIHZhciBxdWVyeSA9IHJlc29sdmVRdWVyeShwYXJzZWRQYXRoLnF1ZXJ5LCBuZXh0LnF1ZXJ5LCByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMucGFyc2VRdWVyeSk7CiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoOwoKICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7CiAgICBoYXNoID0gIiMiICsgaGFzaDsKICB9CgogIHJldHVybiB7CiAgICBfbm9ybWFsaXplZDogdHJ1ZSwKICAgIHBhdGg6IHBhdGgsCiAgICBxdWVyeTogcXVlcnksCiAgICBoYXNoOiBoYXNoCiAgfTsKfQovKiAgKi8KLy8gd29yayBhcm91bmQgd2VpcmQgZmxvdyBidWcKCgp2YXIgdG9UeXBlcyA9IFtTdHJpbmcsIE9iamVjdF07CnZhciBldmVudFR5cGVzID0gW1N0cmluZywgQXJyYXldOwoKdmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307Cgp2YXIgd2FybmVkQ3VzdG9tU2xvdDsKdmFyIHdhcm5lZFRhZ1Byb3A7CnZhciB3YXJuZWRFdmVudFByb3A7CnZhciBMaW5rID0gewogIG5hbWU6ICdSb3V0ZXJMaW5rJywKICBwcm9wczogewogICAgdG86IHsKICAgICAgdHlwZTogdG9UeXBlcywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICB0YWc6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICAiZGVmYXVsdCI6ICdhJwogICAgfSwKICAgIGN1c3RvbTogQm9vbGVhbiwKICAgIGV4YWN0OiBCb29sZWFuLAogICAgZXhhY3RQYXRoOiBCb29sZWFuLAogICAgYXBwZW5kOiBCb29sZWFuLAogICAgcmVwbGFjZTogQm9vbGVhbiwKICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsCiAgICBleGFjdEFjdGl2ZUNsYXNzOiBTdHJpbmcsCiAgICBhcmlhQ3VycmVudFZhbHVlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgImRlZmF1bHQiOiAncGFnZScKICAgIH0sCiAgICBldmVudDogewogICAgICB0eXBlOiBldmVudFR5cGVzLAogICAgICAiZGVmYXVsdCI6ICdjbGljaycKICAgIH0KICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwogICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjsKICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7CiAgICB2YXIgcmVmID0gcm91dGVyLnJlc29sdmUodGhpcy50bywgY3VycmVudCwgdGhpcy5hcHBlbmQpOwogICAgdmFyIGxvY2F0aW9uID0gcmVmLmxvY2F0aW9uOwogICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlOwogICAgdmFyIGhyZWYgPSByZWYuaHJlZjsKICAgIHZhciBjbGFzc2VzID0ge307CiAgICB2YXIgZ2xvYmFsQWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3M7CiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzOyAvLyBTdXBwb3J0IGdsb2JhbCBlbXB0eSBhY3RpdmUgY2xhc3MKCiAgICB2YXIgYWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGwgPyAncm91dGVyLWxpbmstYWN0aXZlJyA6IGdsb2JhbEFjdGl2ZUNsYXNzOwogICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbCA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnIDogZ2xvYmFsRXhhY3RBY3RpdmVDbGFzczsKICAgIHZhciBhY3RpdmVDbGFzcyA9IHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGFjdGl2ZUNsYXNzRmFsbGJhY2sgOiB0aGlzLmFjdGl2ZUNsYXNzOwogICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3MgPSB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA6IHRoaXMuZXhhY3RBY3RpdmVDbGFzczsKICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gcm91dGUucmVkaXJlY3RlZEZyb20gPyBjcmVhdGVSb3V0ZShudWxsLCBub3JtYWxpemVMb2NhdGlvbihyb3V0ZS5yZWRpcmVjdGVkRnJvbSksIG51bGwsIHJvdXRlcikgOiByb3V0ZTsKICAgIGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10gPSBpc1NhbWVSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0LCB0aGlzLmV4YWN0UGF0aCk7CiAgICBjbGFzc2VzW2FjdGl2ZUNsYXNzXSA9IHRoaXMuZXhhY3QgfHwgdGhpcy5leGFjdFBhdGggPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdIDogaXNJbmNsdWRlZFJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpOwogICAgdmFyIGFyaWFDdXJyZW50VmFsdWUgPSBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID8gdGhpcy5hcmlhQ3VycmVudFZhbHVlIDogbnVsbDsKCiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoZSkgewogICAgICBpZiAoZ3VhcmRFdmVudChlKSkgewogICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkgewogICAgICAgICAgcm91dGVyLnJlcGxhY2UobG9jYXRpb24sIG5vb3ApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbiwgbm9vcCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHZhciBvbiA9IHsKICAgICAgY2xpY2s6IGd1YXJkRXZlbnQKICAgIH07CgogICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5ldmVudCkpIHsKICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgb25bZV0gPSBoYW5kbGVyOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjsKICAgIH0KCiAgICB2YXIgZGF0YSA9IHsKICAgICAgImNsYXNzIjogY2xhc3NlcwogICAgfTsKICAgIHZhciBzY29wZWRTbG90ID0gIXRoaXMuJHNjb3BlZFNsb3RzLiRoYXNOb3JtYWwgJiYgdGhpcy4kc2NvcGVkU2xvdHNbImRlZmF1bHQiXSAmJiB0aGlzLiRzY29wZWRTbG90c1siZGVmYXVsdCJdKHsKICAgICAgaHJlZjogaHJlZiwKICAgICAgcm91dGU6IHJvdXRlLAogICAgICBuYXZpZ2F0ZTogaGFuZGxlciwKICAgICAgaXNBY3RpdmU6IGNsYXNzZXNbYWN0aXZlQ2xhc3NdLAogICAgICBpc0V4YWN0QWN0aXZlOiBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdCiAgICB9KTsKCiAgICBpZiAoc2NvcGVkU2xvdCkgewogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5jdXN0b20pIHsKICAgICAgICAhd2FybmVkQ3VzdG9tU2xvdCAmJiB3YXJuKGZhbHNlLCAnSW4gVnVlIFJvdXRlciA0LCB0aGUgdi1zbG90IEFQSSB3aWxsIGJ5IGRlZmF1bHQgd3JhcCBpdHMgY29udGVudCB3aXRoIGFuIDxhPiBlbGVtZW50LiBVc2UgdGhlIGN1c3RvbSBwcm9wIHRvIHJlbW92ZSB0aGlzIHdhcm5pbmc6XG48cm91dGVyLWxpbmsgdi1zbG90PSJ7IG5hdmlnYXRlLCBocmVmIH0iIGN1c3RvbT48L3JvdXRlci1saW5rPlxuJyk7CiAgICAgICAgd2FybmVkQ3VzdG9tU2xvdCA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChzY29wZWRTbG90Lmxlbmd0aCA9PT0gMSkgewogICAgICAgIHJldHVybiBzY29wZWRTbG90WzBdOwogICAgICB9IGVsc2UgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID4gMSB8fCAhc2NvcGVkU2xvdC5sZW5ndGgpIHsKICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgICAgd2FybihmYWxzZSwgIjxyb3V0ZXItbGluaz4gd2l0aCB0bz1cIiIgKyB0aGlzLnRvICsgIlwiIGlzIHRyeWluZyB0byB1c2UgYSBzY29wZWQgc2xvdCBidXQgaXQgZGlkbid0IHByb3ZpZGUgZXhhY3RseSBvbmUgY2hpbGQuIFdyYXBwaW5nIHRoZSBjb250ZW50IHdpdGggYSBzcGFuIGVsZW1lbnQuIik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2NvcGVkU2xvdC5sZW5ndGggPT09IDAgPyBoKCkgOiBoKCdzcGFuJywge30sIHNjb3BlZFNsb3QpOwogICAgICB9CiAgICB9CgogICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgaWYgKCd0YWcnIGluIHRoaXMuJG9wdGlvbnMucHJvcHNEYXRhICYmICF3YXJuZWRUYWdQcm9wKSB7CiAgICAgICAgd2FybihmYWxzZSwgIjxyb3V0ZXItbGluaz4ncyB0YWcgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHRoZSB2LXNsb3QgQVBJIHRvIHJlbW92ZSB0aGlzIHdhcm5pbmc6IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZhbC1vZi1ldmVudC1hbmQtdGFnLXByb3BzLWluLXJvdXRlci1saW5rLiIpOwogICAgICAgIHdhcm5lZFRhZ1Byb3AgPSB0cnVlOwogICAgICB9CgogICAgICBpZiAoJ2V2ZW50JyBpbiB0aGlzLiRvcHRpb25zLnByb3BzRGF0YSAmJiAhd2FybmVkRXZlbnRQcm9wKSB7CiAgICAgICAgd2FybihmYWxzZSwgIjxyb3V0ZXItbGluaz4ncyBldmVudCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIFJvdXRlciA0LiBVc2UgdGhlIHYtc2xvdCBBUEkgdG8gcmVtb3ZlIHRoaXMgd2FybmluZzogaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyNyZW1vdmFsLW9mLWV2ZW50LWFuZC10YWctcHJvcHMtaW4tcm91dGVyLWxpbmsuIik7CiAgICAgICAgd2FybmVkRXZlbnRQcm9wID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIGlmICh0aGlzLnRhZyA9PT0gJ2EnKSB7CiAgICAgIGRhdGEub24gPSBvbjsKICAgICAgZGF0YS5hdHRycyA9IHsKICAgICAgICBocmVmOiBocmVmLAogICAgICAgICdhcmlhLWN1cnJlbnQnOiBhcmlhQ3VycmVudFZhbHVlCiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICAvLyBmaW5kIHRoZSBmaXJzdCA8YT4gY2hpbGQgYW5kIGFwcGx5IGxpc3RlbmVyIGFuZCBocmVmCiAgICAgIHZhciBhID0gZmluZEFuY2hvcih0aGlzLiRzbG90c1siZGVmYXVsdCJdKTsKCiAgICAgIGlmIChhKSB7CiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGUKICAgICAgICBhLmlzU3RhdGljID0gZmFsc2U7CiAgICAgICAgdmFyIGFEYXRhID0gYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpOwogICAgICAgIGFEYXRhLm9uID0gYURhdGEub24gfHwge307IC8vIHRyYW5zZm9ybSBleGlzdGluZyBldmVudHMgaW4gYm90aCBvYmplY3RzIGludG8gYXJyYXlzIHNvIHdlIGNhbiBwdXNoIGxhdGVyCgogICAgICAgIGZvciAodmFyIGV2ZW50IGluIGFEYXRhLm9uKSB7CiAgICAgICAgICB2YXIgaGFuZGxlciQxID0gYURhdGEub25bZXZlbnRdOwoKICAgICAgICAgIGlmIChldmVudCBpbiBvbikgewogICAgICAgICAgICBhRGF0YS5vbltldmVudF0gPSBBcnJheS5pc0FycmF5KGhhbmRsZXIkMSkgPyBoYW5kbGVyJDEgOiBbaGFuZGxlciQxXTsKICAgICAgICAgIH0KICAgICAgICB9IC8vIGFwcGVuZCBuZXcgbGlzdGVuZXJzIGZvciByb3V0ZXItbGluawoKCiAgICAgICAgZm9yICh2YXIgZXZlbnQkMSBpbiBvbikgewogICAgICAgICAgaWYgKGV2ZW50JDEgaW4gYURhdGEub24pIHsKICAgICAgICAgICAgLy8gb25bZXZlbnRdIGlzIGFsd2F5cyBhIGZ1bmN0aW9uCiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdLnB1c2gob25bZXZlbnQkMV0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0gPSBoYW5kbGVyOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGFBdHRycyA9IGEuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYS5kYXRhLmF0dHJzKTsKICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7CiAgICAgICAgYUF0dHJzWydhcmlhLWN1cnJlbnQnXSA9IGFyaWFDdXJyZW50VmFsdWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZG9lc24ndCBoYXZlIDxhPiBjaGlsZCwgYXBwbHkgbGlzdGVuZXIgdG8gc2VsZgogICAgICAgIGRhdGEub24gPSBvbjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBoKHRoaXMudGFnLCBkYXRhLCB0aGlzLiRzbG90c1siZGVmYXVsdCJdKTsKICB9Cn07CgpmdW5jdGlvbiBndWFyZEV2ZW50KGUpIHsKICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5cwogIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkpIHsKICAgIHJldHVybjsKICB9IC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkCgoKICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7CiAgICByZXR1cm47CiAgfSAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGljawoKCiAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApIHsKICAgIHJldHVybjsKICB9IC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9Il9ibGFuayJgCgoKICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHsKICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTsKCiAgICBpZiAoL1xiX2JsYW5rXGIvaS50ZXN0KHRhcmdldCkpIHsKICAgICAgcmV0dXJuOwogICAgfQogIH0gLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZAoKCiAgaWYgKGUucHJldmVudERlZmF1bHQpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBmaW5kQW5jaG9yKGNoaWxkcmVuKSB7CiAgaWYgKGNoaWxkcmVuKSB7CiAgICB2YXIgY2hpbGQ7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldOwoKICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ2EnKSB7CiAgICAgICAgcmV0dXJuIGNoaWxkOwogICAgICB9CgogICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gJiYgKGNoaWxkID0gZmluZEFuY2hvcihjaGlsZC5jaGlsZHJlbikpKSB7CiAgICAgICAgcmV0dXJuIGNoaWxkOwogICAgICB9CiAgICB9CiAgfQp9Cgp2YXIgX1Z1ZTsKCmZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7CiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgewogICAgcmV0dXJuOwogIH0KCiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlOwogIF9WdWUgPSBWdWU7CgogIHZhciBpc0RlZiA9IGZ1bmN0aW9uIGlzRGVmKHYpIHsKICAgIHJldHVybiB2ICE9PSB1bmRlZmluZWQ7CiAgfTsKCiAgdmFyIHJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbiByZWdpc3Rlckluc3RhbmNlKHZtLCBjYWxsVmFsKSB7CiAgICB2YXIgaSA9IHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTsKCiAgICBpZiAoaXNEZWYoaSkgJiYgaXNEZWYoaSA9IGkuZGF0YSkgJiYgaXNEZWYoaSA9IGkucmVnaXN0ZXJSb3V0ZUluc3RhbmNlKSkgewogICAgICBpKHZtLCBjYWxsVmFsKTsKICAgIH0KICB9OwoKICBWdWUubWl4aW4oewogICAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUoKSB7CiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHsKICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gdGhpczsKICAgICAgICB0aGlzLl9yb3V0ZXIgPSB0aGlzLiRvcHRpb25zLnJvdXRlcjsKCiAgICAgICAgdGhpcy5fcm91dGVyLmluaXQodGhpcyk7CgogICAgICAgIFZ1ZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsICdfcm91dGUnLCB0aGlzLl9yb3V0ZXIuaGlzdG9yeS5jdXJyZW50KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gdGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5fcm91dGVyUm9vdCB8fCB0aGlzOwogICAgICB9CgogICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIHRoaXMpOwogICAgfSwKICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpOwogICAgfQogIH0pOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlcicsIHsKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyOwogICAgfQogIH0pOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlJywgewogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZTsKICAgIH0KICB9KTsKICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7CiAgVnVlLmNvbXBvbmVudCgnUm91dGVyTGluaycsIExpbmspOwogIHZhciBzdHJhdHMgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llczsgLy8gdXNlIHRoZSBzYW1lIGhvb2sgbWVyZ2luZyBzdHJhdGVneSBmb3Igcm91dGUgaG9va3MKCiAgc3RyYXRzLmJlZm9yZVJvdXRlRW50ZXIgPSBzdHJhdHMuYmVmb3JlUm91dGVMZWF2ZSA9IHN0cmF0cy5iZWZvcmVSb3V0ZVVwZGF0ZSA9IHN0cmF0cy5jcmVhdGVkOwp9Ci8qICAqLwoKCnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJzsKLyogICovCgpmdW5jdGlvbiBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIG9sZFBhdGhMaXN0LCBvbGRQYXRoTWFwLCBvbGROYW1lTWFwLCBwYXJlbnRSb3V0ZSkgewogIC8vIHRoZSBwYXRoIGxpc3QgaXMgdXNlZCB0byBjb250cm9sIHBhdGggbWF0Y2hpbmcgcHJpb3JpdHkKICB2YXIgcGF0aExpc3QgPSBvbGRQYXRoTGlzdCB8fCBbXTsgLy8gJGZsb3ctZGlzYWJsZS1saW5lCgogIHZhciBwYXRoTWFwID0gb2xkUGF0aE1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCiAgdmFyIG5hbWVNYXAgPSBvbGROYW1lTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7CiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUsIHBhcmVudFJvdXRlKTsKICB9KTsgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmQKCiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgIGlmIChwYXRoTGlzdFtpXSA9PT0gJyonKSB7CiAgICAgIHBhdGhMaXN0LnB1c2gocGF0aExpc3Quc3BsaWNlKGksIDEpWzBdKTsKICAgICAgbC0tOwogICAgICBpLS07CiAgICB9CiAgfQoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHsKICAgIC8vIHdhcm4gaWYgcm91dGVzIGRvIG5vdCBpbmNsdWRlIGxlYWRpbmcgc2xhc2hlcwogICAgdmFyIGZvdW5kID0gcGF0aExpc3QgLy8gY2hlY2sgZm9yIG1pc3NpbmcgbGVhZGluZyBzbGFzaAogICAgLmZpbHRlcihmdW5jdGlvbiAocGF0aCkgewogICAgICByZXR1cm4gcGF0aCAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJyonICYmIHBhdGguY2hhckF0KDApICE9PSAnLyc7CiAgICB9KTsKCiAgICBpZiAoZm91bmQubGVuZ3RoID4gMCkgewogICAgICB2YXIgcGF0aE5hbWVzID0gZm91bmQubWFwKGZ1bmN0aW9uIChwYXRoKSB7CiAgICAgICAgcmV0dXJuICItICIgKyBwYXRoOwogICAgICB9KS5qb2luKCdcbicpOwogICAgICB3YXJuKGZhbHNlLCAiTm9uLW5lc3RlZCByb3V0ZXMgbXVzdCBpbmNsdWRlIGEgbGVhZGluZyBzbGFzaCBjaGFyYWN0ZXIuIEZpeCB0aGUgZm9sbG93aW5nIHJvdXRlczogXG4iICsgcGF0aE5hbWVzKTsKICAgIH0KICB9CgogIHJldHVybiB7CiAgICBwYXRoTGlzdDogcGF0aExpc3QsCiAgICBwYXRoTWFwOiBwYXRoTWFwLAogICAgbmFtZU1hcDogbmFtZU1hcAogIH07Cn0KCmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSwgcGFyZW50LCBtYXRjaEFzKSB7CiAgdmFyIHBhdGggPSByb3V0ZS5wYXRoOwogIHZhciBuYW1lID0gcm91dGUubmFtZTsKCiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgIGFzc2VydChwYXRoICE9IG51bGwsICJcInBhdGhcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uIik7CiAgICBhc3NlcnQodHlwZW9mIHJvdXRlLmNvbXBvbmVudCAhPT0gJ3N0cmluZycsICJyb3V0ZSBjb25maWcgXCJjb21wb25lbnRcIiBmb3IgcGF0aDogIiArIFN0cmluZyhwYXRoIHx8IG5hbWUpICsgIiBjYW5ub3QgYmUgYSAiICsgInN0cmluZyBpZC4gVXNlIGFuIGFjdHVhbCBjb21wb25lbnQgaW5zdGVhZC4iKTsKICAgIHdhcm4oIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4CiAgICAhL1teXHUwMDAwLVx1MDA3Rl0rLy50ZXN0KHBhdGgpLCAiUm91dGUgd2l0aCBwYXRoIFwiIiArIHBhdGggKyAiXCIgY29udGFpbnMgdW5lbmNvZGVkIGNoYXJhY3RlcnMsIG1ha2Ugc3VyZSAiICsgInlvdXIgcGF0aCBpcyBjb3JyZWN0bHkgZW5jb2RlZCBiZWZvcmUgcGFzc2luZyBpdCB0byB0aGUgcm91dGVyLiBVc2UgIiArICJlbmNvZGVVUkkgdG8gZW5jb2RlIHN0YXRpYyBzZWdtZW50cyBvZiB5b3VyIHBhdGguIik7CiAgfQoKICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9IHJvdXRlLnBhdGhUb1JlZ2V4cE9wdGlvbnMgfHwge307CiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTsKCiAgaWYgKHR5cGVvZiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSAnYm9vbGVhbicpIHsKICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTsKICB9CgogIHZhciByZWNvcmQgPSB7CiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCwKICAgIHJlZ2V4OiBjb21waWxlUm91dGVSZWdleChub3JtYWxpemVkUGF0aCwgcGF0aFRvUmVnZXhwT3B0aW9ucyksCiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsKICAgICAgImRlZmF1bHQiOiByb3V0ZS5jb21wb25lbnQKICAgIH0sCiAgICBhbGlhczogcm91dGUuYWxpYXMgPyB0eXBlb2Ygcm91dGUuYWxpYXMgPT09ICdzdHJpbmcnID8gW3JvdXRlLmFsaWFzXSA6IHJvdXRlLmFsaWFzIDogW10sCiAgICBpbnN0YW5jZXM6IHt9LAogICAgZW50ZXJlZENiczoge30sCiAgICBuYW1lOiBuYW1lLAogICAgcGFyZW50OiBwYXJlbnQsCiAgICBtYXRjaEFzOiBtYXRjaEFzLAogICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LAogICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLAogICAgbWV0YTogcm91dGUubWV0YSB8fCB7fSwKICAgIHByb3BzOiByb3V0ZS5wcm9wcyA9PSBudWxsID8ge30gOiByb3V0ZS5jb21wb25lbnRzID8gcm91dGUucHJvcHMgOiB7CiAgICAgICJkZWZhdWx0Ijogcm91dGUucHJvcHMKICAgIH0KICB9OwoKICBpZiAocm91dGUuY2hpbGRyZW4pIHsKICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLgogICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsCiAgICAvLyBub3QgYmUgcmVuZGVyZWQgKEdIIElzc3VlICM2MjkpCiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICBpZiAocm91dGUubmFtZSAmJiAhcm91dGUucmVkaXJlY3QgJiYgcm91dGUuY2hpbGRyZW4uc29tZShmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICByZXR1cm4gL15cLz8kLy50ZXN0KGNoaWxkLnBhdGgpOwogICAgICB9KSkgewogICAgICAgIHdhcm4oZmFsc2UsICJOYW1lZCBSb3V0ZSAnIiArIHJvdXRlLm5hbWUgKyAiJyBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLiAiICsgIldoZW4gbmF2aWdhdGluZyB0byB0aGlzIG5hbWVkIHJvdXRlICg6dG89XCJ7bmFtZTogJyIgKyByb3V0ZS5uYW1lICsgIidcIiksICIgKyAidGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgd2lsbCBub3QgYmUgcmVuZGVyZWQuIFJlbW92ZSB0aGUgbmFtZSBmcm9tICIgKyAidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCAiICsgImxpbmtzIGluc3RlYWQuIik7CiAgICAgIH0KICAgIH0KCiAgICByb3V0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBcyA/IGNsZWFuUGF0aChtYXRjaEFzICsgIi8iICsgY2hpbGQucGF0aCkgOiB1bmRlZmluZWQ7CiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBjaGlsZCwgcmVjb3JkLCBjaGlsZE1hdGNoQXMpOwogICAgfSk7CiAgfQoKICBpZiAoIXBhdGhNYXBbcmVjb3JkLnBhdGhdKSB7CiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTsKICAgIHBhdGhNYXBbcmVjb3JkLnBhdGhdID0gcmVjb3JkOwogIH0KCiAgaWYgKHJvdXRlLmFsaWFzICE9PSB1bmRlZmluZWQpIHsKICAgIHZhciBhbGlhc2VzID0gQXJyYXkuaXNBcnJheShyb3V0ZS5hbGlhcykgPyByb3V0ZS5hbGlhcyA6IFtyb3V0ZS5hbGlhc107CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGlhc2VzLmxlbmd0aDsgKytpKSB7CiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07CgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkgewogICAgICAgIHdhcm4oZmFsc2UsICJGb3VuZCBhbiBhbGlhcyB3aXRoIHRoZSBzYW1lIHZhbHVlIGFzIHRoZSBwYXRoOiBcIiIgKyBwYXRoICsgIlwiLiBZb3UgaGF2ZSB0byByZW1vdmUgdGhhdCBhbGlhcy4gSXQgd2lsbCBiZSBpZ25vcmVkIGluIGRldmVsb3BtZW50LiIpOyAvLyBza2lwIGluIGRldiB0byBtYWtlIGl0IHdvcmsKCiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIHZhciBhbGlhc1JvdXRlID0gewogICAgICAgIHBhdGg6IGFsaWFzLAogICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlbgogICAgICB9OwogICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgYWxpYXNSb3V0ZSwgcGFyZW50LCByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBcwogICAgICApOwogICAgfQogIH0KCiAgaWYgKG5hbWUpIHsKICAgIGlmICghbmFtZU1hcFtuYW1lXSkgewogICAgICBuYW1lTWFwW25hbWVdID0gcmVjb3JkOwogICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtYXRjaEFzKSB7CiAgICAgIHdhcm4oZmFsc2UsICJEdXBsaWNhdGUgbmFtZWQgcm91dGVzIGRlZmluaXRpb246ICIgKyAieyBuYW1lOiBcIiIgKyBuYW1lICsgIlwiLCBwYXRoOiBcIiIgKyByZWNvcmQucGF0aCArICJcIiB9Iik7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBjb21waWxlUm91dGVSZWdleChwYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSB7CiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpOwoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgdmFyIGtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgcmVnZXgua2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgd2Fybigha2V5c1trZXkubmFtZV0sICJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFwiIiArIHBhdGggKyAiXCIiKTsKICAgICAga2V5c1trZXkubmFtZV0gPSB0cnVlOwogICAgfSk7CiAgfQoKICByZXR1cm4gcmVnZXg7Cn0KCmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCwgcGFyZW50LCBzdHJpY3QpIHsKICBpZiAoIXN0cmljdCkgewogICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXC8kLywgJycpOwogIH0KCiAgaWYgKHBhdGhbMF0gPT09ICcvJykgewogICAgcmV0dXJuIHBhdGg7CiAgfQoKICBpZiAocGFyZW50ID09IG51bGwpIHsKICAgIHJldHVybiBwYXRoOwogIH0KCiAgcmV0dXJuIGNsZWFuUGF0aChwYXJlbnQucGF0aCArICIvIiArIHBhdGgpOwp9Ci8qICAqLwoKCmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIocm91dGVzLCByb3V0ZXIpIHsKICB2YXIgcmVmID0gY3JlYXRlUm91dGVNYXAocm91dGVzKTsKICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7CiAgdmFyIHBhdGhNYXAgPSByZWYucGF0aE1hcDsKICB2YXIgbmFtZU1hcCA9IHJlZi5uYW1lTWFwOwoKICBmdW5jdGlvbiBhZGRSb3V0ZXMocm91dGVzKSB7CiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTsKICB9CgogIGZ1bmN0aW9uIGFkZFJvdXRlKHBhcmVudE9yUm91dGUsIHJvdXRlKSB7CiAgICB2YXIgcGFyZW50ID0gX3R5cGVvZihwYXJlbnRPclJvdXRlKSAhPT0gJ29iamVjdCcgPyBuYW1lTWFwW3BhcmVudE9yUm91dGVdIDogdW5kZWZpbmVkOyAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKCiAgICBjcmVhdGVSb3V0ZU1hcChbcm91dGUgfHwgcGFyZW50T3JSb3V0ZV0sIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBwYXJlbnQpOyAvLyBhZGQgYWxpYXNlcyBvZiBwYXJlbnQKCiAgICBpZiAocGFyZW50KSB7CiAgICAgIGNyZWF0ZVJvdXRlTWFwKCAvLyAkZmxvdy1kaXNhYmxlLWxpbmUgcm91dGUgaXMgZGVmaW5lZCBpZiBwYXJlbnQgaXMKICAgICAgcGFyZW50LmFsaWFzLm1hcChmdW5jdGlvbiAoYWxpYXMpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgcGF0aDogYWxpYXMsCiAgICAgICAgICBjaGlsZHJlbjogW3JvdXRlXQogICAgICAgIH07CiAgICAgIH0pLCBwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcGFyZW50KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldFJvdXRlcygpIHsKICAgIHJldHVybiBwYXRoTGlzdC5tYXAoZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgcmV0dXJuIHBhdGhNYXBbcGF0aF07CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG1hdGNoKHJhdywgY3VycmVudFJvdXRlLCByZWRpcmVjdGVkRnJvbSkgewogICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpOwogICAgdmFyIG5hbWUgPSBsb2NhdGlvbi5uYW1lOwoKICAgIGlmIChuYW1lKSB7CiAgICAgIHZhciByZWNvcmQgPSBuYW1lTWFwW25hbWVdOwoKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKHJlY29yZCwgIlJvdXRlIHdpdGggbmFtZSAnIiArIG5hbWUgKyAiJyBkb2VzIG5vdCBleGlzdCIpOwogICAgICB9CgogICAgICBpZiAoIXJlY29yZCkgewogICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pOwogICAgICB9CgogICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuICFrZXkub3B0aW9uYWw7CiAgICAgIH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuIGtleS5uYW1lOwogICAgICB9KTsKCiAgICAgIGlmIChfdHlwZW9mKGxvY2F0aW9uLnBhcmFtcykgIT09ICdvYmplY3QnKSB7CiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307CiAgICAgIH0KCiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgX3R5cGVvZihjdXJyZW50Um91dGUucGFyYW1zKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gY3VycmVudFJvdXRlLnBhcmFtcykgewogICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkgewogICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsICJuYW1lZCByb3V0ZSBcIiIgKyBuYW1lICsgIlwiIik7CiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20pOwogICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRoKSB7CiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9OwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07CiAgICAgICAgdmFyIHJlY29yZCQxID0gcGF0aE1hcFtwYXRoXTsKCiAgICAgICAgaWYgKG1hdGNoUm91dGUocmVjb3JkJDEucmVnZXgsIGxvY2F0aW9uLnBhdGgsIGxvY2F0aW9uLnBhcmFtcykpIHsKICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IC8vIG5vIG1hdGNoCgoKICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pOwogIH0KCiAgZnVuY3Rpb24gcmVkaXJlY3QocmVjb3JkLCBsb2NhdGlvbikgewogICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7CiAgICB2YXIgcmVkaXJlY3QgPSB0eXBlb2Ygb3JpZ2luYWxSZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJyA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSkgOiBvcmlnaW5hbFJlZGlyZWN0OwoKICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7CiAgICAgIHJlZGlyZWN0ID0gewogICAgICAgIHBhdGg6IHJlZGlyZWN0CiAgICAgIH07CiAgICB9CgogICAgaWYgKCFyZWRpcmVjdCB8fCBfdHlwZW9mKHJlZGlyZWN0KSAhPT0gJ29iamVjdCcpIHsKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKGZhbHNlLCAiaW52YWxpZCByZWRpcmVjdCBvcHRpb246ICIgKyBKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpOwogICAgICB9CgogICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKTsKICAgIH0KCiAgICB2YXIgcmUgPSByZWRpcmVjdDsKICAgIHZhciBuYW1lID0gcmUubmFtZTsKICAgIHZhciBwYXRoID0gcmUucGF0aDsKICAgIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5OwogICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoOwogICAgdmFyIHBhcmFtcyA9IGxvY2F0aW9uLnBhcmFtczsKICAgIHF1ZXJ5ID0gcmUuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykgPyByZS5xdWVyeSA6IHF1ZXJ5OwogICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDsKICAgIHBhcmFtcyA9IHJlLmhhc093blByb3BlcnR5KCdwYXJhbXMnKSA/IHJlLnBhcmFtcyA6IHBhcmFtczsKCiAgICBpZiAobmFtZSkgewogICAgICAvLyByZXNvbHZlZCBuYW1lZCBkaXJlY3QKICAgICAgdmFyIHRhcmdldFJlY29yZCA9IG5hbWVNYXBbbmFtZV07CgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsICJyZWRpcmVjdCBmYWlsZWQ6IG5hbWVkIHJvdXRlIFwiIiArIG5hbWUgKyAiXCIgbm90IGZvdW5kLiIpOwogICAgICB9CgogICAgICByZXR1cm4gbWF0Y2goewogICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLAogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgcXVlcnk6IHF1ZXJ5LAogICAgICAgIGhhc2g6IGhhc2gsCiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbik7CiAgICB9IGVsc2UgaWYgKHBhdGgpIHsKICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdAogICAgICB2YXIgcmF3UGF0aCA9IHJlc29sdmVSZWNvcmRQYXRoKHBhdGgsIHJlY29yZCk7IC8vIDIuIHJlc29sdmUgcGFyYW1zCgogICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsICJyZWRpcmVjdCByb3V0ZSB3aXRoIHBhdGggXCIiICsgcmF3UGF0aCArICJcIiIpOyAvLyAzLiByZW1hdGNoIHdpdGggZXhpc3RpbmcgcXVlcnkgYW5kIGhhc2gKCiAgICAgIHJldHVybiBtYXRjaCh7CiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsCiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLAogICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICBoYXNoOiBoYXNoCiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHsKICAgICAgICB3YXJuKGZhbHNlLCAiaW52YWxpZCByZWRpcmVjdCBvcHRpb246ICIgKyBKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpOwogICAgICB9CgogICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIG1hdGNoQXMpIHsKICAgIHZhciBhbGlhc2VkUGF0aCA9IGZpbGxQYXJhbXMobWF0Y2hBcywgbG9jYXRpb24ucGFyYW1zLCAiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXCIiICsgbWF0Y2hBcyArICJcIiIpOwogICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHsKICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsCiAgICAgIHBhdGg6IGFsaWFzZWRQYXRoCiAgICB9KTsKCiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7CiAgICAgIHZhciBtYXRjaGVkID0gYWxpYXNlZE1hdGNoLm1hdGNoZWQ7CiAgICAgIHZhciBhbGlhc2VkUmVjb3JkID0gbWF0Y2hlZFttYXRjaGVkLmxlbmd0aCAtIDFdOwogICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zOwogICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKGFsaWFzZWRSZWNvcmQsIGxvY2F0aW9uKTsKICAgIH0KCiAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKTsKICB9CgogIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSkgewogICAgaWYgKHJlY29yZCAmJiByZWNvcmQucmVkaXJlY3QpIHsKICAgICAgcmV0dXJuIHJlZGlyZWN0KHJlY29yZCwgcmVkaXJlY3RlZEZyb20gfHwgbG9jYXRpb24pOwogICAgfQoKICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLm1hdGNoQXMpIHsKICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKTsKICAgIH0KCiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcik7CiAgfQoKICByZXR1cm4gewogICAgbWF0Y2g6IG1hdGNoLAogICAgYWRkUm91dGU6IGFkZFJvdXRlLAogICAgZ2V0Um91dGVzOiBnZXRSb3V0ZXMsCiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlcwogIH07Cn0KCmZ1bmN0aW9uIG1hdGNoUm91dGUocmVnZXgsIHBhdGgsIHBhcmFtcykgewogIHZhciBtID0gcGF0aC5tYXRjaChyZWdleCk7CgogIGlmICghbSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0gZWxzZSBpZiAoIXBhcmFtcykgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmb3IgKHZhciBpID0gMSwgbGVuID0gbS5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdOwoKICAgIGlmIChrZXkpIHsKICAgICAgLy8gRml4ICMxOTk0OiB1c2luZyAqIHdpdGggcHJvcHM6IHRydWUgZ2VuZXJhdGVzIGEgcGFyYW0gbmFtZWQgMAogICAgICBwYXJhbXNba2V5Lm5hbWUgfHwgJ3BhdGhNYXRjaCddID0gdHlwZW9mIG1baV0gPT09ICdzdHJpbmcnID8gZGVjb2RlKG1baV0pIDogbVtpXTsKICAgIH0KICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpIHsKICByZXR1cm4gcmVzb2x2ZVBhdGgocGF0aCwgcmVjb3JkLnBhcmVudCA/IHJlY29yZC5wYXJlbnQucGF0aCA6ICcvJywgdHJ1ZSk7Cn0KLyogICovCi8vIHVzZSBVc2VyIFRpbWluZyBhcGkgKGlmIHByZXNlbnQpIGZvciBtb3JlIGFjY3VyYXRlIGtleSBwcmVjaXNpb24KCgp2YXIgVGltZSA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IHdpbmRvdy5wZXJmb3JtYW5jZSA6IERhdGU7CgpmdW5jdGlvbiBnZW5TdGF0ZUtleSgpIHsKICByZXR1cm4gVGltZS5ub3coKS50b0ZpeGVkKDMpOwp9Cgp2YXIgX2tleSA9IGdlblN0YXRlS2V5KCk7CgpmdW5jdGlvbiBnZXRTdGF0ZUtleSgpIHsKICByZXR1cm4gX2tleTsKfQoKZnVuY3Rpb24gc2V0U3RhdGVLZXkoa2V5KSB7CiAgcmV0dXJuIF9rZXkgPSBrZXk7Cn0KLyogICovCgoKdmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwoKZnVuY3Rpb24gc2V0dXBTY3JvbGwoKSB7CiAgLy8gUHJldmVudCBicm93c2VyIHNjcm9sbCBiZWhhdmlvciBvbiBIaXN0b3J5IHBvcHN0YXRlCiAgaWYgKCdzY3JvbGxSZXN0b3JhdGlvbicgaW4gd2luZG93Lmhpc3RvcnkpIHsKICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7CiAgfSAvLyBGaXggZm9yICMxNTg1IGZvciBGaXJlZm94CiAgLy8gRml4IGZvciAjMjE5NSBBZGQgb3B0aW9uYWwgdGhpcmQgYXR0cmlidXRlIHRvIHdvcmthcm91bmQgYSBidWcgaW4gc2FmYXJpIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODI2NzgKICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aAogIC8vIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdAogIC8vIGxvY2F0aW9uLmhvc3QgY29udGFpbnMgdGhlIHBvcnQgYW5kIGxvY2F0aW9uLmhvc3RuYW1lIGRvZXNuJ3QKCgogIHZhciBwcm90b2NvbEFuZFBhdGggPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7CiAgdmFyIGFic29sdXRlUGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UocHJvdG9jb2xBbmRQYXRoLCAnJyk7IC8vIHByZXNlcnZlIGV4aXN0aW5nIGhpc3Rvcnkgc3RhdGUgYXMgaXQgY291bGQgYmUgb3ZlcnJpZGVuIGJ5IHRoZSB1c2VyCgogIHZhciBzdGF0ZUNvcHkgPSBleHRlbmQoe30sIHdpbmRvdy5oaXN0b3J5LnN0YXRlKTsKICBzdGF0ZUNvcHkua2V5ID0gZ2V0U3RhdGVLZXkoKTsKICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGVDb3B5LCAnJywgYWJzb2x1dGVQYXRoKTsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVQb3BTdGF0ZSk7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcFN0YXRlKTsKICB9Owp9CgpmdW5jdGlvbiBoYW5kbGVTY3JvbGwocm91dGVyLCB0bywgZnJvbSwgaXNQb3ApIHsKICBpZiAoIXJvdXRlci5hcHApIHsKICAgIHJldHVybjsKICB9CgogIHZhciBiZWhhdmlvciA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yOwoKICBpZiAoIWJlaGF2aW9yKSB7CiAgICByZXR1cm47CiAgfQoKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgInNjcm9sbEJlaGF2aW9yIG11c3QgYmUgYSBmdW5jdGlvbiIpOwogIH0gLy8gd2FpdCB1bnRpbCByZS1yZW5kZXIgZmluaXNoZXMgYmVmb3JlIHNjcm9sbGluZwoKCiAgcm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgdmFyIHBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTsKICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvci5jYWxsKHJvdXRlciwgdG8sIGZyb20sIGlzUG9wID8gcG9zaXRpb24gOiBudWxsKTsKCiAgICBpZiAoIXNob3VsZFNjcm9sbCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKHR5cGVvZiBzaG91bGRTY3JvbGwudGhlbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBzaG91bGRTY3JvbGwudGhlbihmdW5jdGlvbiAoc2hvdWxkU2Nyb2xsKSB7CiAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICAgICAgICBhc3NlcnQoZmFsc2UsIGVyci50b1N0cmluZygpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKCkgewogIHZhciBrZXkgPSBnZXRTdGF0ZUtleSgpOwoKICBpZiAoa2V5KSB7CiAgICBwb3NpdGlvblN0b3JlW2tleV0gPSB7CiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCwKICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0CiAgICB9OwogIH0KfQoKZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZSkgewogIHNhdmVTY3JvbGxQb3NpdGlvbigpOwoKICBpZiAoZS5zdGF0ZSAmJiBlLnN0YXRlLmtleSkgewogICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpOwogIH0KfQoKZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24oKSB7CiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7CgogIGlmIChrZXkpIHsKICAgIHJldHVybiBwb3NpdGlvblN0b3JlW2tleV07CiAgfQp9CgpmdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCkgewogIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB2YXIgZG9jUmVjdCA9IGRvY0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogIHZhciBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICByZXR1cm4gewogICAgeDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSBvZmZzZXQueCwKICAgIHk6IGVsUmVjdC50b3AgLSBkb2NSZWN0LnRvcCAtIG9mZnNldC55CiAgfTsKfQoKZnVuY3Rpb24gaXNWYWxpZFBvc2l0aW9uKG9iaikgewogIHJldHVybiBpc051bWJlcihvYmoueCkgfHwgaXNOdW1iZXIob2JqLnkpOwp9CgpmdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbihvYmopIHsKICByZXR1cm4gewogICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsCiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IHdpbmRvdy5wYWdlWU9mZnNldAogIH07Cn0KCmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldChvYmopIHsKICByZXR1cm4gewogICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiAwLAogICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiAwCiAgfTsKfQoKZnVuY3Rpb24gaXNOdW1iZXIodikgewogIHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcic7Cn0KCnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXGQvOwoKZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKSB7CiAgdmFyIGlzT2JqZWN0ID0gX3R5cGVvZihzaG91bGRTY3JvbGwpID09PSAnb2JqZWN0JzsKCiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7CiAgICAvLyBnZXRFbGVtZW50QnlJZCB3b3VsZCBzdGlsbCBmYWlsIGlmIHRoZSBzZWxlY3RvciBjb250YWlucyBhIG1vcmUgY29tcGxpY2F0ZWQgcXVlcnkgbGlrZSAjbWFpbltkYXRhLWF0dHJdCiAgICAvLyBidXQgYXQgdGhlIHNhbWUgdGltZSwgaXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gc2VsZWN0IGFuIGVsZW1lbnQgd2l0aCBhbiBpZCBhbmQgYW4gZXh0cmEgc2VsZWN0b3IKICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7CgogICAgaWYgKGVsKSB7CiAgICAgIHZhciBvZmZzZXQgPSBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIF90eXBlb2Yoc2hvdWxkU2Nyb2xsLm9mZnNldCkgPT09ICdvYmplY3QnID8gc2hvdWxkU2Nyb2xsLm9mZnNldCA6IHt9OwogICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTsKICAgICAgcG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCk7CiAgICB9IGVsc2UgaWYgKGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7CiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTsKICAgIH0KICB9IGVsc2UgaWYgKGlzT2JqZWN0ICYmIGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7CiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7CiAgfQoKICBpZiAocG9zaXRpb24pIHsKICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB7CiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7CiAgICAgICAgbGVmdDogcG9zaXRpb24ueCwKICAgICAgICB0b3A6IHBvc2l0aW9uLnksCiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgICAgYmVoYXZpb3I6IHNob3VsZFNjcm9sbC5iZWhhdmlvcgogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHdpbmRvdy5zY3JvbGxUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTsKICAgIH0KICB9Cn0KLyogICovCgoKdmFyIHN1cHBvcnRzUHVzaFN0YXRlID0gaW5Ccm93c2VyICYmIGZ1bmN0aW9uICgpIHsKICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsKCiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgdHlwZW9mIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSA9PT0gJ2Z1bmN0aW9uJzsKfSgpOwoKZnVuY3Rpb24gcHVzaFN0YXRlKHVybCwgcmVwbGFjZSkgewogIHNhdmVTY3JvbGxQb3NpdGlvbigpOyAvLyB0cnkuLi5jYXRjaCB0aGUgcHVzaFN0YXRlIGNhbGwgdG8gZ2V0IGFyb3VuZCBTYWZhcmkKICAvLyBET00gRXhjZXB0aW9uIDE4IHdoZXJlIGl0IGxpbWl0cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzCgogIHZhciBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7CgogIHRyeSB7CiAgICBpZiAocmVwbGFjZSkgewogICAgICAvLyBwcmVzZXJ2ZSBleGlzdGluZyBoaXN0b3J5IHN0YXRlIGFzIGl0IGNvdWxkIGJlIG92ZXJyaWRlbiBieSB0aGUgdXNlcgogICAgICB2YXIgc3RhdGVDb3B5ID0gZXh0ZW5kKHt9LCBoaXN0b3J5LnN0YXRlKTsKICAgICAgc3RhdGVDb3B5LmtleSA9IGdldFN0YXRlS2V5KCk7CiAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlQ29weSwgJycsIHVybCk7CiAgICB9IGVsc2UgewogICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7CiAgICAgICAga2V5OiBzZXRTdGF0ZUtleShnZW5TdGF0ZUtleSgpKQogICAgICB9LCAnJywgdXJsKTsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICB3aW5kb3cubG9jYXRpb25bcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdhc3NpZ24nXSh1cmwpOwogIH0KfQoKZnVuY3Rpb24gcmVwbGFjZVN0YXRlKHVybCkgewogIHB1c2hTdGF0ZSh1cmwsIHRydWUpOwp9Ci8qICAqLwoKCmZ1bmN0aW9uIHJ1blF1ZXVlKHF1ZXVlLCBmbiwgY2IpIHsKICB2YXIgc3RlcCA9IGZ1bmN0aW9uIHN0ZXAoaW5kZXgpIHsKICAgIGlmIChpbmRleCA+PSBxdWV1ZS5sZW5ndGgpIHsKICAgICAgY2IoKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChxdWV1ZVtpbmRleF0pIHsKICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN0ZXAoaW5kZXggKyAxKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdGVwKGluZGV4ICsgMSk7CiAgICAgIH0KICAgIH0KICB9OwoKICBzdGVwKDApOwp9IC8vIFdoZW4gY2hhbmdpbmcgdGhpbmcsIGFsc28gZWRpdCByb3V0ZXIuZC50cwoKCnZhciBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUgPSB7CiAgcmVkaXJlY3RlZDogMiwKICBhYm9ydGVkOiA0LAogIGNhbmNlbGxlZDogOCwKICBkdXBsaWNhdGVkOiAxNgp9OwoKZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvblJlZGlyZWN0ZWRFcnJvcihmcm9tLCB0bykgewogIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihmcm9tLCB0bywgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLnJlZGlyZWN0ZWQsICJSZWRpcmVjdGVkIHdoZW4gZ29pbmcgZnJvbSBcIiIgKyBmcm9tLmZ1bGxQYXRoICsgIlwiIHRvIFwiIiArIHN0cmluZ2lmeVJvdXRlKHRvKSArICJcIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLiIpOwp9CgpmdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uRHVwbGljYXRlZEVycm9yKGZyb20sIHRvKSB7CiAgdmFyIGVycm9yID0gY3JlYXRlUm91dGVyRXJyb3IoZnJvbSwgdG8sIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5kdXBsaWNhdGVkLCAiQXZvaWRlZCByZWR1bmRhbnQgbmF2aWdhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uOiBcIiIgKyBmcm9tLmZ1bGxQYXRoICsgIlwiLiIpOyAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIHRoZSBmaXJzdCBpbnRyb2R1Y3Rpb24gb2YgRXJyb3JzCgogIGVycm9yLm5hbWUgPSAnTmF2aWdhdGlvbkR1cGxpY2F0ZWQnOwogIHJldHVybiBlcnJvcjsKfQoKZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGZyb20sIHRvKSB7CiAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKGZyb20sIHRvLCBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUuY2FuY2VsbGVkLCAiTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcIiIgKyBmcm9tLmZ1bGxQYXRoICsgIlwiIHRvIFwiIiArIHRvLmZ1bGxQYXRoICsgIlwiIHdpdGggYSBuZXcgbmF2aWdhdGlvbi4iKTsKfQoKZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkFib3J0ZWRFcnJvcihmcm9tLCB0bykgewogIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihmcm9tLCB0bywgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmFib3J0ZWQsICJOYXZpZ2F0aW9uIGFib3J0ZWQgZnJvbSBcIiIgKyBmcm9tLmZ1bGxQYXRoICsgIlwiIHRvIFwiIiArIHRvLmZ1bGxQYXRoICsgIlwiIHZpYSBhIG5hdmlnYXRpb24gZ3VhcmQuIik7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVJvdXRlckVycm9yKGZyb20sIHRvLCB0eXBlLCBtZXNzYWdlKSB7CiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpOwogIGVycm9yLl9pc1JvdXRlciA9IHRydWU7CiAgZXJyb3IuZnJvbSA9IGZyb207CiAgZXJyb3IudG8gPSB0bzsKICBlcnJvci50eXBlID0gdHlwZTsKICByZXR1cm4gZXJyb3I7Cn0KCnZhciBwcm9wZXJ0aWVzVG9Mb2cgPSBbJ3BhcmFtcycsICdxdWVyeScsICdoYXNoJ107CgpmdW5jdGlvbiBzdHJpbmdpZnlSb3V0ZSh0bykgewogIGlmICh0eXBlb2YgdG8gPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gdG87CiAgfQoKICBpZiAoJ3BhdGgnIGluIHRvKSB7CiAgICByZXR1cm4gdG8ucGF0aDsKICB9CgogIHZhciBsb2NhdGlvbiA9IHt9OwogIHByb3BlcnRpZXNUb0xvZy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIGlmIChrZXkgaW4gdG8pIHsKICAgICAgbG9jYXRpb25ba2V5XSA9IHRvW2tleV07CiAgICB9CiAgfSk7CiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGxvY2F0aW9uLCBudWxsLCAyKTsKfQoKZnVuY3Rpb24gaXNFcnJvcihlcnIpIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xOwp9CgpmdW5jdGlvbiBpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgZXJyb3JUeXBlKSB7CiAgcmV0dXJuIGlzRXJyb3IoZXJyKSAmJiBlcnIuX2lzUm91dGVyICYmIChlcnJvclR5cGUgPT0gbnVsbCB8fCBlcnIudHlwZSA9PT0gZXJyb3JUeXBlKTsKfQovKiAgKi8KCgpmdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzKG1hdGNoZWQpIHsKICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBuZXh0KSB7CiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTsKICAgIHZhciBwZW5kaW5nID0gMDsKICAgIHZhciBlcnJvciA9IG51bGw7CiAgICBmbGF0TWFwQ29tcG9uZW50cyhtYXRjaGVkLCBmdW5jdGlvbiAoZGVmLCBfLCBtYXRjaCwga2V5KSB7CiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCwKICAgICAgLy8gYXNzdW1lIGl0J3MgYW4gYXN5bmMgY29tcG9uZW50IHJlc29sdmUgZnVuY3Rpb24uCiAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgVnVlJ3MgZGVmYXVsdCBhc3luYyByZXNvbHZpbmcgbWVjaGFuaXNtIGJlY2F1c2UKICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW4KICAgICAgLy8gcmVzb2x2ZWQuCiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGRlZi5jaWQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGhhc0FzeW5jID0gdHJ1ZTsKICAgICAgICBwZW5kaW5nKys7CiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXNvbHZlZERlZikgewogICAgICAgICAgaWYgKGlzRVNNb2R1bGUocmVzb2x2ZWREZWYpKSB7CiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWZbImRlZmF1bHQiXTsKICAgICAgICAgIH0gLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZQoKCiAgICAgICAgICBkZWYucmVzb2x2ZWQgPSB0eXBlb2YgcmVzb2x2ZWREZWYgPT09ICdmdW5jdGlvbicgPyByZXNvbHZlZERlZiA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTsKICAgICAgICAgIG1hdGNoLmNvbXBvbmVudHNba2V5XSA9IHJlc29sdmVkRGVmOwogICAgICAgICAgcGVuZGluZy0tOwoKICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHsKICAgICAgICAgICAgbmV4dCgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHZhciBtc2cgPSAiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50ICIgKyBrZXkgKyAiOiAiICsgcmVhc29uOwogICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpOwoKICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbikgPyByZWFzb24gOiBuZXcgRXJyb3IobXNnKTsKICAgICAgICAgICAgbmV4dChlcnJvcik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHJlczsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJlcyA9IGRlZihyZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuMwogICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7CgogICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgY29tcC50aGVuKHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIGlmICghaGFzQXN5bmMpIHsKICAgICAgbmV4dCgpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZuKSB7CiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiBmbihtLmNvbXBvbmVudHNba2V5XSwgbS5pbnN0YW5jZXNba2V5XSwgbSwga2V5KTsKICAgIH0pOwogIH0pKTsKfQoKZnVuY3Rpb24gZmxhdHRlbihhcnIpIHsKICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTsKfQoKdmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgX3R5cGVvZihTeW1ib2wudG9TdHJpbmdUYWcpID09PSAnc3ltYm9sJzsKCmZ1bmN0aW9uIGlzRVNNb2R1bGUob2JqKSB7CiAgcmV0dXJuIG9iai5fX2VzTW9kdWxlIHx8IGhhc1N5bWJvbCAmJiBvYmpbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZSc7Cn0gLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZQovLyBzbyB0aGUgcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zIG1heSBnZXQgY2FsbGVkIGFuIGV4dHJhIHRpbWUKLy8gaWYgdGhlIHVzZXIgdXNlcyBhbiBhcnJvdyBmdW5jdGlvbiBzaG9ydGhhbmQgdGhhdCBoYXBwZW5zIHRvCi8vIHJldHVybiB0aGF0IFByb21pc2UuCgoKZnVuY3Rpb24gb25jZShmbikgewogIHZhciBjYWxsZWQgPSBmYWxzZTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIGFyZ3MgPSBbXSwKICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwoKICAgIHdoaWxlIChsZW4tLSkgewogICAgICBhcmdzW2xlbl0gPSBhcmd1bWVudHNbbGVuXTsKICAgIH0KCiAgICBpZiAoY2FsbGVkKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBjYWxsZWQgPSB0cnVlOwogICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpOwogIH07Cn0KLyogICovCgoKdmFyIEhpc3RvcnkgPSBmdW5jdGlvbiBIaXN0b3J5KHJvdXRlciwgYmFzZSkgewogIHRoaXMucm91dGVyID0gcm91dGVyOwogIHRoaXMuYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7IC8vIHN0YXJ0IHdpdGggYSByb3V0ZSBvYmplY3QgdGhhdCBzdGFuZHMgZm9yICJub3doZXJlIgoKICB0aGlzLmN1cnJlbnQgPSBTVEFSVDsKICB0aGlzLnBlbmRpbmcgPSBudWxsOwogIHRoaXMucmVhZHkgPSBmYWxzZTsKICB0aGlzLnJlYWR5Q2JzID0gW107CiAgdGhpcy5yZWFkeUVycm9yQ2JzID0gW107CiAgdGhpcy5lcnJvckNicyA9IFtdOwogIHRoaXMubGlzdGVuZXJzID0gW107Cn07CgpIaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4oY2IpIHsKICB0aGlzLmNiID0gY2I7Cn07CgpIaXN0b3J5LnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeShjYiwgZXJyb3JDYikgewogIGlmICh0aGlzLnJlYWR5KSB7CiAgICBjYigpOwogIH0gZWxzZSB7CiAgICB0aGlzLnJlYWR5Q2JzLnB1c2goY2IpOwoKICAgIGlmIChlcnJvckNiKSB7CiAgICAgIHRoaXMucmVhZHlFcnJvckNicy5wdXNoKGVycm9yQ2IpOwogICAgfQogIH0KfTsKCkhpc3RvcnkucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGVycm9yQ2IpIHsKICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7Cn07CgpIaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8obG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICB2YXIgdGhpcyQxID0gdGhpczsKICB2YXIgcm91dGU7IC8vIGNhdGNoIHJlZGlyZWN0IG9wdGlvbiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMzIwMQoKICB0cnkgewogICAgcm91dGUgPSB0aGlzLnJvdXRlci5tYXRjaChsb2NhdGlvbiwgdGhpcy5jdXJyZW50KTsKICB9IGNhdGNoIChlKSB7CiAgICB0aGlzLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7CiAgICAgIGNiKGUpOwogICAgfSk7IC8vIEV4Y2VwdGlvbiBzaG91bGQgc3RpbGwgYmUgdGhyb3duCgogICAgdGhyb3cgZTsKICB9CgogIHZhciBwcmV2ID0gdGhpcy5jdXJyZW50OwogIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHsKICAgIHRoaXMkMS51cGRhdGVSb3V0ZShyb3V0ZSk7CiAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgdGhpcyQxLmVuc3VyZVVSTCgpOwogICAgdGhpcyQxLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHsKICAgICAgaG9vayAmJiBob29rKHJvdXRlLCBwcmV2KTsKICAgIH0pOyAvLyBmaXJlIHJlYWR5IGNicyBvbmNlCgogICAgaWYgKCF0aGlzJDEucmVhZHkpIHsKICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTsKICAgICAgdGhpcyQxLnJlYWR5Q2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgY2Iocm91dGUpOwogICAgICB9KTsKICAgIH0KICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICBpZiAob25BYm9ydCkgewogICAgICBvbkFib3J0KGVycik7CiAgICB9CgogICAgaWYgKGVyciAmJiAhdGhpcyQxLnJlYWR5KSB7CiAgICAgIC8vIEluaXRpYWwgcmVkaXJlY3Rpb24gc2hvdWxkIG5vdCBtYXJrIHRoZSBoaXN0b3J5IGFzIHJlYWR5IHlldAogICAgICAvLyBiZWNhdXNlIGl0J3MgdHJpZ2dlcmVkIGJ5IHRoZSByZWRpcmVjdGlvbiBpbnN0ZWFkCiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMjI1CiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMzMxCiAgICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5yZWRpcmVjdGVkKSB8fCBwcmV2ICE9PSBTVEFSVCkgewogICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7CiAgICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsKICAgICAgICAgIGNiKGVycik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9KTsKfTsKCkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24ocm91dGUsIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICB2YXIgdGhpcyQxID0gdGhpczsKICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICB0aGlzLnBlbmRpbmcgPSByb3V0ZTsKCiAgdmFyIGFib3J0ID0gZnVuY3Rpb24gYWJvcnQoZXJyKSB7CiAgICAvLyBjaGFuZ2VkIGFmdGVyIGFkZGluZyBlcnJvcnMgd2l0aAogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvcHVsbC8zMDQ3IGJlZm9yZSB0aGF0IGNoYW5nZSwKICAgIC8vIHJlZGlyZWN0IGFuZCBhYm9ydGVkIG5hdmlnYXRpb24gd291bGQgcHJvZHVjZSBhbiBlcnIgPT0gbnVsbAogICAgaWYgKCFpc05hdmlnYXRpb25GYWlsdXJlKGVycikgJiYgaXNFcnJvcihlcnIpKSB7CiAgICAgIGlmICh0aGlzJDEuZXJyb3JDYnMubGVuZ3RoKSB7CiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgICBjYihlcnIpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oZmFsc2UsICd1bmNhdWdodCBlcnJvciBkdXJpbmcgcm91dGUgbmF2aWdhdGlvbjonKTsKICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgIH0KICAgIH0KCiAgICBvbkFib3J0ICYmIG9uQWJvcnQoZXJyKTsKICB9OwoKICB2YXIgbGFzdFJvdXRlSW5kZXggPSByb3V0ZS5tYXRjaGVkLmxlbmd0aCAtIDE7CiAgdmFyIGxhc3RDdXJyZW50SW5kZXggPSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMTsKCiAgaWYgKGlzU2FtZVJvdXRlKHJvdXRlLCBjdXJyZW50KSAmJiAvLyBpbiB0aGUgY2FzZSB0aGUgcm91dGUgbWFwIGhhcyBiZWVuIGR5bmFtaWNhbGx5IGFwcGVuZGVkIHRvCiAgbGFzdFJvdXRlSW5kZXggPT09IGxhc3RDdXJyZW50SW5kZXggJiYgcm91dGUubWF0Y2hlZFtsYXN0Um91dGVJbmRleF0gPT09IGN1cnJlbnQubWF0Y2hlZFtsYXN0Q3VycmVudEluZGV4XSkgewogICAgdGhpcy5lbnN1cmVVUkwoKTsKICAgIHJldHVybiBhYm9ydChjcmVhdGVOYXZpZ2F0aW9uRHVwbGljYXRlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSk7CiAgfQoKICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKHRoaXMuY3VycmVudC5tYXRjaGVkLCByb3V0ZS5tYXRjaGVkKTsKICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkOwogIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDsKICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDsKICB2YXIgcXVldWUgPSBbXS5jb25jYXQoIC8vIGluLWNvbXBvbmVudCBsZWF2ZSBndWFyZHMKICBleHRyYWN0TGVhdmVHdWFyZHMoZGVhY3RpdmF0ZWQpLCAvLyBnbG9iYWwgYmVmb3JlIGhvb2tzCiAgdGhpcy5yb3V0ZXIuYmVmb3JlSG9va3MsIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3MKICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksIC8vIGluLWNvbmZpZyBlbnRlciBndWFyZHMKICBhY3RpdmF0ZWQubWFwKGZ1bmN0aW9uIChtKSB7CiAgICByZXR1cm4gbS5iZWZvcmVFbnRlcjsKICB9KSwgLy8gYXN5bmMgY29tcG9uZW50cwogIHJlc29sdmVBc3luY0NvbXBvbmVudHMoYWN0aXZhdGVkKSk7CgogIHZhciBpdGVyYXRvciA9IGZ1bmN0aW9uIGl0ZXJhdG9yKGhvb2ssIG5leHQpIHsKICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHsKICAgICAgcmV0dXJuIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25DYW5jZWxsZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpOwogICAgfQoKICAgIHRyeSB7CiAgICAgIGhvb2socm91dGUsIGN1cnJlbnQsIGZ1bmN0aW9uICh0bykgewogICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHsKICAgICAgICAgIC8vIG5leHQoZmFsc2UpIC0+IGFib3J0IG5hdmlnYXRpb24sIGVuc3VyZSBjdXJyZW50IFVSTAogICAgICAgICAgdGhpcyQxLmVuc3VyZVVSTCh0cnVlKTsKICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTsKICAgICAgICB9IGVsc2UgaWYgKGlzRXJyb3IodG8pKSB7CiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpOwogICAgICAgICAgYWJvcnQodG8pOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJyB8fCBfdHlwZW9mKHRvKSA9PT0gJ29iamVjdCcgJiYgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKSB7CiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdAogICAgICAgICAgYWJvcnQoY3JlYXRlTmF2aWdhdGlvblJlZGlyZWN0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpOwoKICAgICAgICAgIGlmIChfdHlwZW9mKHRvKSA9PT0gJ29iamVjdCcgJiYgdG8ucmVwbGFjZSkgewogICAgICAgICAgICB0aGlzJDEucmVwbGFjZSh0byk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzJDEucHVzaCh0byk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGNvbmZpcm0gdHJhbnNpdGlvbiBhbmQgcGFzcyBvbiB0aGUgdmFsdWUKICAgICAgICAgIG5leHQodG8pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGFib3J0KGUpOwogICAgfQogIH07CgogIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkgewogICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmUKICAgIC8vIGV4dHJhY3RpbmcgaW4tY29tcG9uZW50IGVudGVyIGd1YXJkcwogICAgdmFyIGVudGVyR3VhcmRzID0gZXh0cmFjdEVudGVyR3VhcmRzKGFjdGl2YXRlZCk7CiAgICB2YXIgcXVldWUgPSBlbnRlckd1YXJkcy5jb25jYXQodGhpcyQxLnJvdXRlci5yZXNvbHZlSG9va3MpOwogICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHsKICAgICAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSk7CiAgICAgIH0KCiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDsKICAgICAgb25Db21wbGV0ZShyb3V0ZSk7CgogICAgICBpZiAodGhpcyQxLnJvdXRlci5hcHApIHsKICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSk7Cn07CgpIaXN0b3J5LnByb3RvdHlwZS51cGRhdGVSb3V0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlKHJvdXRlKSB7CiAgdGhpcy5jdXJyZW50ID0gcm91dGU7CiAgdGhpcy5jYiAmJiB0aGlzLmNiKHJvdXRlKTsKfTsKCkhpc3RvcnkucHJvdG90eXBlLnNldHVwTGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7Ly8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBlbXB0eQp9OwoKSGlzdG9yeS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93bigpIHsKICAvLyBjbGVhbiB1cCBldmVudCBsaXN0ZW5lcnMKICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjM0MQogIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNsZWFudXBMaXN0ZW5lcikgewogICAgY2xlYW51cExpc3RlbmVyKCk7CiAgfSk7CiAgdGhpcy5saXN0ZW5lcnMgPSBbXTsgLy8gcmVzZXQgY3VycmVudCBoaXN0b3J5IHJvdXRlCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyOTQKCiAgdGhpcy5jdXJyZW50ID0gU1RBUlQ7CiAgdGhpcy5wZW5kaW5nID0gbnVsbDsKfTsKCmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkgewogIGlmICghYmFzZSkgewogICAgaWYgKGluQnJvd3NlcikgewogICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWcKICAgICAgdmFyIGJhc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTsKICAgICAgYmFzZSA9IGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJy8nOyAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW4KCiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XC9cL1teXC9dKy8sICcnKTsKICAgIH0gZWxzZSB7CiAgICAgIGJhc2UgPSAnLyc7CiAgICB9CiAgfSAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2gKCgogIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7CiAgICBiYXNlID0gJy8nICsgYmFzZTsKICB9IC8vIHJlbW92ZSB0cmFpbGluZyBzbGFzaAoKCiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXC8kLywgJycpOwp9CgpmdW5jdGlvbiByZXNvbHZlUXVldWUoY3VycmVudCwgbmV4dCkgewogIHZhciBpOwogIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpOwoKICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHsKICAgIGlmIChjdXJyZW50W2ldICE9PSBuZXh0W2ldKSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIHVwZGF0ZWQ6IG5leHQuc2xpY2UoMCwgaSksCiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksCiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKQogIH07Cn0KCmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMocmVjb3JkcywgbmFtZSwgYmluZCwgcmV2ZXJzZSkgewogIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkgewogICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7CgogICAgaWYgKGd1YXJkKSB7CiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGd1YXJkKSA/IGd1YXJkLm1hcChmdW5jdGlvbiAoZ3VhcmQpIHsKICAgICAgICByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOwogICAgICB9KSA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KTsKICAgIH0KICB9KTsKICByZXR1cm4gZmxhdHRlbihyZXZlcnNlID8gZ3VhcmRzLnJldmVyc2UoKSA6IGd1YXJkcyk7Cn0KCmZ1bmN0aW9uIGV4dHJhY3RHdWFyZChkZWYsIGtleSkgewogIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7CiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC4KICAgIGRlZiA9IF9WdWUuZXh0ZW5kKGRlZik7CiAgfQoKICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XTsKfQoKZnVuY3Rpb24gZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSB7CiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKTsKfQoKZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzKHVwZGF0ZWQpIHsKICByZXR1cm4gZXh0cmFjdEd1YXJkcyh1cGRhdGVkLCAnYmVmb3JlUm91dGVVcGRhdGUnLCBiaW5kR3VhcmQpOwp9CgpmdW5jdGlvbiBiaW5kR3VhcmQoZ3VhcmQsIGluc3RhbmNlKSB7CiAgaWYgKGluc3RhbmNlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkKCkgewogICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0KfQoKZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzKGFjdGl2YXRlZCkgewogIHJldHVybiBleHRyYWN0R3VhcmRzKGFjdGl2YXRlZCwgJ2JlZm9yZVJvdXRlRW50ZXInLCBmdW5jdGlvbiAoZ3VhcmQsIF8sIG1hdGNoLCBrZXkpIHsKICAgIHJldHVybiBiaW5kRW50ZXJHdWFyZChndWFyZCwgbWF0Y2gsIGtleSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCh0bywgZnJvbSwgbmV4dCkgewogICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHsKICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGlmICghbWF0Y2guZW50ZXJlZENic1trZXldKSB7CiAgICAgICAgICBtYXRjaC5lbnRlcmVkQ2JzW2tleV0gPSBbXTsKICAgICAgICB9CgogICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XS5wdXNoKGNiKTsKICAgICAgfQoKICAgICAgbmV4dChjYik7CiAgICB9KTsKICB9Owp9Ci8qICAqLwoKCnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovZnVuY3Rpb24gKEhpc3RvcnkpIHsKICBmdW5jdGlvbiBIVE1MNUhpc3Rvcnkocm91dGVyLCBiYXNlKSB7CiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTsKICAgIHRoaXMuX3N0YXJ0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpOwogIH0KCiAgaWYgKEhpc3RvcnkpIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5OwogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUpOwogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIVE1MNUhpc3Rvcnk7CgogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycygpIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwoKICAgIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPiAwKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgcm91dGVyID0gdGhpcy5yb3V0ZXI7CiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7CiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7CgogICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7CiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7CiAgICB9CgogICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZVJvdXRpbmdFdmVudCgpIHsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzJDEuY3VycmVudDsgLy8gQXZvaWRpbmcgZmlyc3QgYHBvcHN0YXRlYCBldmVudCBkaXNwYXRjaGVkIGluIHNvbWUgYnJvd3NlcnMgYnV0IGZpcnN0CiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS4KCiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTsKCiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IHRoaXMkMS5fc3RhcnRMb2NhdGlvbikgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7CiAgICAgICAgICBoYW5kbGVTY3JvbGwocm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgaGFuZGxlUm91dGluZ0V2ZW50KTsKICAgIHRoaXMubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVSb3V0aW5nRXZlbnQpOwogICAgfSk7CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvKG4pIHsKICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pOwogIH07CgogIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwogICAgdmFyIHJlZiA9IHRoaXM7CiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7CiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgIHB1c2hTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpOwogICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpOwogICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgfSwgb25BYm9ydCk7CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogICAgdmFyIHRoaXMkMSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdGhpczsKICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgcmVwbGFjZVN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7CiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7CiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7CiAgICB9LCBvbkFib3J0KTsKICB9OwoKICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTChwdXNoKSB7CiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7CiAgICAgIHZhciBjdXJyZW50ID0gY2xlYW5QYXRoKHRoaXMuYmFzZSArIHRoaXMuY3VycmVudC5mdWxsUGF0aCk7CiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7CiAgICB9CiAgfTsKCiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7CiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKTsKICB9OwoKICByZXR1cm4gSFRNTDVIaXN0b3J5Owp9KEhpc3RvcnkpOwoKZnVuY3Rpb24gZ2V0TG9jYXRpb24oYmFzZSkgewogIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lOwoKICBpZiAoYmFzZSAmJiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihiYXNlLnRvTG93ZXJDYXNlKCkpID09PSAwKSB7CiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7CiAgfQoKICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDsKfQovKiAgKi8KCgp2YXIgSGFzaEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovZnVuY3Rpb24gKEhpc3RvcnkpIHsKICBmdW5jdGlvbiBIYXNoSGlzdG9yeShyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7CiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTsgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZwoKICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGVuc3VyZVNsYXNoKCk7CiAgfQoKICBpZiAoSGlzdG9yeSkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTsKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUpOwogIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhhc2hIaXN0b3J5OyAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHMKICAvLyB0byBhdm9pZCB0aGUgaGFzaGNoYW5nZSBsaXN0ZW5lciBiZWluZyBmaXJlZCB0b28gZWFybHkKCiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnNldHVwTGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7CiAgICB2YXIgdGhpcyQxID0gdGhpczsKCiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyOwogICAgdmFyIGV4cGVjdFNjcm9sbCA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yOwogICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsOwoKICAgIGlmIChzdXBwb3J0c1Njcm9sbCkgewogICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHNldHVwU2Nyb2xsKCkpOwogICAgfQoKICAgIHZhciBoYW5kbGVSb3V0aW5nRXZlbnQgPSBmdW5jdGlvbiBoYW5kbGVSb3V0aW5nRXZlbnQoKSB7CiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7CgogICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMkMS50cmFuc2l0aW9uVG8oZ2V0SGFzaCgpLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHsKICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7CiAgICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgdmFyIGV2ZW50VHlwZSA9IHN1cHBvcnRzUHVzaFN0YXRlID8gJ3BvcHN0YXRlJyA6ICdoYXNoY2hhbmdlJzsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlUm91dGluZ0V2ZW50KTsKICAgIHRoaXMubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZVJvdXRpbmdFdmVudCk7CiAgICB9KTsKICB9OwoKICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwogICAgdmFyIHJlZiA9IHRoaXM7CiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7CiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgIHB1c2hIYXNoKHJvdXRlLmZ1bGxQYXRoKTsKICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTsKICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTsKICAgIH0sIG9uQWJvcnQpOwogIH07CgogIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogICAgdmFyIHRoaXMkMSA9IHRoaXM7CiAgICB2YXIgcmVmID0gdGhpczsKICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpOwogICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpOwogICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgfSwgb25BYm9ydCk7CiAgfTsKCiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28obikgewogICAgd2luZG93Lmhpc3RvcnkuZ28obik7CiAgfTsKCiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTChwdXNoKSB7CiAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudC5mdWxsUGF0aDsKCiAgICBpZiAoZ2V0SGFzaCgpICE9PSBjdXJyZW50KSB7CiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpOwogICAgfQogIH07CgogIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7CiAgICByZXR1cm4gZ2V0SGFzaCgpOwogIH07CgogIHJldHVybiBIYXNoSGlzdG9yeTsKfShIaXN0b3J5KTsKCmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2soYmFzZSkgewogIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGJhc2UpOwoKICBpZiAoIS9eXC8jLy50ZXN0KGxvY2F0aW9uKSkgewogICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKZnVuY3Rpb24gZW5zdXJlU2xhc2goKSB7CiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7CgogIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJlcGxhY2VIYXNoKCcvJyArIHBhdGgpOwogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2V0SGFzaCgpIHsKICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90CiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCEKICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpOyAvLyBlbXB0eSBwYXRoCgogIGlmIChpbmRleCA8IDApIHsKICAgIHJldHVybiAnJzsKICB9CgogIGhyZWYgPSBocmVmLnNsaWNlKGluZGV4ICsgMSk7CiAgcmV0dXJuIGhyZWY7Cn0KCmZ1bmN0aW9uIGdldFVybChwYXRoKSB7CiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICB2YXIgaSA9IGhyZWYuaW5kZXhPZignIycpOwogIHZhciBiYXNlID0gaSA+PSAwID8gaHJlZi5zbGljZSgwLCBpKSA6IGhyZWY7CiAgcmV0dXJuIGJhc2UgKyAiIyIgKyBwYXRoOwp9CgpmdW5jdGlvbiBwdXNoSGFzaChwYXRoKSB7CiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7CiAgICBwdXNoU3RhdGUoZ2V0VXJsKHBhdGgpKTsKICB9IGVsc2UgewogICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoOwogIH0KfQoKZnVuY3Rpb24gcmVwbGFjZUhhc2gocGF0aCkgewogIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkgewogICAgcmVwbGFjZVN0YXRlKGdldFVybChwYXRoKSk7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGdldFVybChwYXRoKSk7CiAgfQp9Ci8qICAqLwoKCnZhciBBYnN0cmFjdEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovZnVuY3Rpb24gKEhpc3RvcnkpIHsKICBmdW5jdGlvbiBBYnN0cmFjdEhpc3Rvcnkocm91dGVyLCBiYXNlKSB7CiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTsKICAgIHRoaXMuc3RhY2sgPSBbXTsKICAgIHRoaXMuaW5kZXggPSAtMTsKICB9CgogIGlmIChIaXN0b3J5KSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTsKICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlKTsKICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWJzdHJhY3RIaXN0b3J5OwoKICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7CiAgICB2YXIgdGhpcyQxID0gdGhpczsKICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHsKICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7CiAgICAgIHRoaXMkMS5pbmRleCsrOwogICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpOwogICAgfSwgb25BYm9ydCk7CiAgfTsKCiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkgewogICAgdmFyIHRoaXMkMSA9IHRoaXM7CiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7CiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7CiAgICB9LCBvbkFib3J0KTsKICB9OwoKICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28obikgewogICAgdmFyIHRoaXMkMSA9IHRoaXM7CiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjsKCiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgcm91dGUgPSB0aGlzLnN0YWNrW3RhcmdldEluZGV4XTsKICAgIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHByZXYgPSB0aGlzJDEuY3VycmVudDsKICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7CiAgICAgIHRoaXMkMS51cGRhdGVSb3V0ZShyb3V0ZSk7CiAgICAgIHRoaXMkMS5yb3V0ZXIuYWZ0ZXJIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7CiAgICAgICAgaG9vayAmJiBob29rKHJvdXRlLCBwcmV2KTsKICAgICAgfSk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQpKSB7CiAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7CiAgICAgIH0KICAgIH0pOwogIH07CgogIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkgewogICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07CiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLyc7CiAgfTsKCiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwoKSB7Ly8gbm9vcAogIH07CgogIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7Cn0oSGlzdG9yeSk7Ci8qICAqLwoKCnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIob3B0aW9ucykgewogIGlmIChvcHRpb25zID09PSB2b2lkIDApIG9wdGlvbnMgPSB7fTsKICB0aGlzLmFwcCA9IG51bGw7CiAgdGhpcy5hcHBzID0gW107CiAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICB0aGlzLmJlZm9yZUhvb2tzID0gW107CiAgdGhpcy5yZXNvbHZlSG9va3MgPSBbXTsKICB0aGlzLmFmdGVySG9va3MgPSBbXTsKICB0aGlzLm1hdGNoZXIgPSBjcmVhdGVNYXRjaGVyKG9wdGlvbnMucm91dGVzIHx8IFtdLCB0aGlzKTsKICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnaGFzaCc7CiAgdGhpcy5mYWxsYmFjayA9IG1vZGUgPT09ICdoaXN0b3J5JyAmJiAhc3VwcG9ydHNQdXNoU3RhdGUgJiYgb3B0aW9ucy5mYWxsYmFjayAhPT0gZmFsc2U7CgogIGlmICh0aGlzLmZhbGxiYWNrKSB7CiAgICBtb2RlID0gJ2hhc2gnOwogIH0KCiAgaWYgKCFpbkJyb3dzZXIpIHsKICAgIG1vZGUgPSAnYWJzdHJhY3QnOwogIH0KCiAgdGhpcy5tb2RlID0gbW9kZTsKCiAgc3dpdGNoIChtb2RlKSB7CiAgICBjYXNlICdoaXN0b3J5JzoKICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpOwogICAgICBicmVhazsKCiAgICBjYXNlICdoYXNoJzoKICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhhc2hIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSwgdGhpcy5mYWxsYmFjayk7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgJ2Fic3RyYWN0JzoKICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEFic3RyYWN0SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpOwogICAgICBicmVhazsKCiAgICBkZWZhdWx0OgogICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgICAgIGFzc2VydChmYWxzZSwgImludmFsaWQgbW9kZTogIiArIG1vZGUpOwogICAgICB9CgogIH0KfTsKCnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7CiAgY3VycmVudFJvdXRlOiB7CiAgICBjb25maWd1cmFibGU6IHRydWUKICB9Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2gocmF3LCBjdXJyZW50LCByZWRpcmVjdGVkRnJvbSkgewogIHJldHVybiB0aGlzLm1hdGNoZXIubWF0Y2gocmF3LCBjdXJyZW50LCByZWRpcmVjdGVkRnJvbSk7Cn07Cgpwcm90b3R5cGVBY2Nlc3NvcnMuY3VycmVudFJvdXRlLmdldCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5jdXJyZW50Owp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdChhcHAKLyogVnVlIGNvbXBvbmVudCBpbnN0YW5jZSAqLwopIHsKICB2YXIgdGhpcyQxID0gdGhpczsKICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydChpbnN0YWxsLmluc3RhbGxlZCwgIm5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBjYWxsIGBWdWUudXNlKFZ1ZVJvdXRlcilgICIgKyAiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuIik7CiAgdGhpcy5hcHBzLnB1c2goYXBwKTsgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlcgogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8yNjM5CgogIGFwcC4kb25jZSgnaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAvLyBjbGVhbiBvdXQgYXBwIGZyb20gdGhpcy5hcHBzIGFycmF5IG9uY2UgZGVzdHJveWVkCiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7CgogICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsKICAgIH0gLy8gZW5zdXJlIHdlIHN0aWxsIGhhdmUgYSBtYWluIGFwcCBvciBudWxsIGlmIG5vIGFwcHMKICAgIC8vIHdlIGRvIG5vdCByZWxlYXNlIHRoZSByb3V0ZXIgc28gaXQgY2FuIGJlIHJldXNlZAoKCiAgICBpZiAodGhpcyQxLmFwcCA9PT0gYXBwKSB7CiAgICAgIHRoaXMkMS5hcHAgPSB0aGlzJDEuYXBwc1swXSB8fCBudWxsOwogICAgfQoKICAgIGlmICghdGhpcyQxLmFwcCkgewogICAgICB0aGlzJDEuaGlzdG9yeS50ZWFyZG93bigpOwogICAgfQogIH0pOyAvLyBtYWluIGFwcCBwcmV2aW91c2x5IGluaXRpYWxpemVkCiAgLy8gcmV0dXJuIGFzIHdlIGRvbid0IG5lZWQgdG8gc2V0IHVwIG5ldyBoaXN0b3J5IGxpc3RlbmVyCgogIGlmICh0aGlzLmFwcCkgewogICAgcmV0dXJuOwogIH0KCiAgdGhpcy5hcHAgPSBhcHA7CiAgdmFyIGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7CgogIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5IHx8IGhpc3RvcnkgaW5zdGFuY2VvZiBIYXNoSGlzdG9yeSkgewogICAgdmFyIGhhbmRsZUluaXRpYWxTY3JvbGwgPSBmdW5jdGlvbiBoYW5kbGVJbml0aWFsU2Nyb2xsKHJvdXRlT3JFcnJvcikgewogICAgICB2YXIgZnJvbSA9IGhpc3RvcnkuY3VycmVudDsKICAgICAgdmFyIGV4cGVjdFNjcm9sbCA9IHRoaXMkMS5vcHRpb25zLnNjcm9sbEJlaGF2aW9yOwogICAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7CgogICAgICBpZiAoc3VwcG9ydHNTY3JvbGwgJiYgJ2Z1bGxQYXRoJyBpbiByb3V0ZU9yRXJyb3IpIHsKICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLCByb3V0ZU9yRXJyb3IsIGZyb20sIGZhbHNlKTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyhyb3V0ZU9yRXJyb3IpIHsKICAgICAgaGlzdG9yeS5zZXR1cExpc3RlbmVycygpOwogICAgICBoYW5kbGVJbml0aWFsU2Nyb2xsKHJvdXRlT3JFcnJvcik7CiAgICB9OwoKICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksIHNldHVwTGlzdGVuZXJzLCBzZXR1cExpc3RlbmVycyk7CiAgfQoKICBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAocm91dGUpIHsKICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkgewogICAgICBhcHAuX3JvdXRlID0gcm91dGU7CiAgICB9KTsKICB9KTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2goZm4pIHsKICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlUmVzb2x2ZSA9IGZ1bmN0aW9uIGJlZm9yZVJlc29sdmUoZm4pIHsKICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaChmbikgewogIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5hZnRlckhvb2tzLCBmbik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5KGNiLCBlcnJvckNiKSB7CiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpOwp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihlcnJvckNiKSB7CiAgdGhpcy5oaXN0b3J5Lm9uRXJyb3IoZXJyb3JDYik7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7CiAgdmFyIHRoaXMkMSA9IHRoaXM7IC8vICRmbG93LWRpc2FibGUtbGluZQoKICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB0aGlzJDEuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIHRoaXMuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTsKICB9Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7CiAgdmFyIHRoaXMkMSA9IHRoaXM7IC8vICRmbG93LWRpc2FibGUtbGluZQoKICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB0aGlzJDEuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIHRoaXMuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTsKICB9Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28obikgewogIHRoaXMuaGlzdG9yeS5nbyhuKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uIGJhY2soKSB7CiAgdGhpcy5nbygtMSk7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkKCkgewogIHRoaXMuZ28oMSk7Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmdldE1hdGNoZWRDb21wb25lbnRzID0gZnVuY3Rpb24gZ2V0TWF0Y2hlZENvbXBvbmVudHModG8pIHsKICB2YXIgcm91dGUgPSB0byA/IHRvLm1hdGNoZWQgPyB0byA6IHRoaXMucmVzb2x2ZSh0bykucm91dGUgOiB0aGlzLmN1cnJlbnRSb3V0ZTsKCiAgaWYgKCFyb3V0ZSkgewogICAgcmV0dXJuIFtdOwogIH0KCiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgcm91dGUubWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiBtLmNvbXBvbmVudHNba2V5XTsKICAgIH0pOwogIH0pKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodG8sIGN1cnJlbnQsIGFwcGVuZCkgewogIGN1cnJlbnQgPSBjdXJyZW50IHx8IHRoaXMuaGlzdG9yeS5jdXJyZW50OwogIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHRvLCBjdXJyZW50LCBhcHBlbmQsIHRoaXMpOwogIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpOwogIHZhciBmdWxsUGF0aCA9IHJvdXRlLnJlZGlyZWN0ZWRGcm9tIHx8IHJvdXRlLmZ1bGxQYXRoOwogIHZhciBiYXNlID0gdGhpcy5oaXN0b3J5LmJhc2U7CiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpOwogIHJldHVybiB7CiAgICBsb2NhdGlvbjogbG9jYXRpb24sCiAgICByb3V0ZTogcm91dGUsCiAgICBocmVmOiBocmVmLAogICAgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXQKICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sCiAgICByZXNvbHZlZDogcm91dGUKICB9Owp9OwoKVnVlUm91dGVyLnByb3RvdHlwZS5nZXRSb3V0ZXMgPSBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7CiAgcmV0dXJuIHRoaXMubWF0Y2hlci5nZXRSb3V0ZXMoKTsKfTsKClZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGUgPSBmdW5jdGlvbiBhZGRSb3V0ZShwYXJlbnRPclJvdXRlLCByb3V0ZSkgewogIHRoaXMubWF0Y2hlci5hZGRSb3V0ZShwYXJlbnRPclJvdXRlLCByb3V0ZSk7CgogIGlmICh0aGlzLmhpc3RvcnkuY3VycmVudCAhPT0gU1RBUlQpIHsKICAgIHRoaXMuaGlzdG9yeS50cmFuc2l0aW9uVG8odGhpcy5oaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTsKICB9Cn07CgpWdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyhyb3V0ZXMpIHsKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgewogICAgd2FybihmYWxzZSwgJ3JvdXRlci5hZGRSb3V0ZXMoKSBpcyBkZXByZWNhdGVkIGFuZCBoYXMgYmVlbiByZW1vdmVkIGluIFZ1ZSBSb3V0ZXIgNC4gVXNlIHJvdXRlci5hZGRSb3V0ZSgpIGluc3RlYWQuJyk7CiAgfQoKICB0aGlzLm1hdGNoZXIuYWRkUm91dGVzKHJvdXRlcyk7CgogIGlmICh0aGlzLmhpc3RvcnkuY3VycmVudCAhPT0gU1RBUlQpIHsKICAgIHRoaXMuaGlzdG9yeS50cmFuc2l0aW9uVG8odGhpcy5oaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTsKICB9Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydGllcyhWdWVSb3V0ZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMpOwoKZnVuY3Rpb24gcmVnaXN0ZXJIb29rKGxpc3QsIGZuKSB7CiAgbGlzdC5wdXNoKGZuKTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIGkgPSBsaXN0LmluZGV4T2YoZm4pOwoKICAgIGlmIChpID4gLTEpIHsKICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7CiAgICB9CiAgfTsKfQoKZnVuY3Rpb24gY3JlYXRlSHJlZihiYXNlLCBmdWxsUGF0aCwgbW9kZSkgewogIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDsKICByZXR1cm4gYmFzZSA/IGNsZWFuUGF0aChiYXNlICsgJy8nICsgcGF0aCkgOiBwYXRoOwp9CgpWdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7ClZ1ZVJvdXRlci52ZXJzaW9uID0gJzMuNS4xJzsKVnVlUm91dGVyLmlzTmF2aWdhdGlvbkZhaWx1cmUgPSBpc05hdmlnYXRpb25GYWlsdXJlOwpWdWVSb3V0ZXIuTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gTmF2aWdhdGlvbkZhaWx1cmVUeXBlOwpWdWVSb3V0ZXIuU1RBUlRfTE9DQVRJT04gPSBTVEFSVDsKCmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkgewogIHdpbmRvdy5WdWUudXNlKFZ1ZVJvdXRlcik7Cn0KCmV4cG9ydCBkZWZhdWx0IFZ1ZVJvdXRlcjs="},null]}